package generator

import (
	"encoding/json"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"strconv"
	"strings"
	"text/template"

	"github.com/Masterminds/sprig/v3"
	"github.com/iancoleman/strcase"
	"go.uber.org/multierr"
)

const maxInLine = 100

func first(s string) string { return strings.Split(strcase.ToDelimited(s, ' '), " ")[0] }

var funcs = template.FuncMap{
	"camel": strcase.ToCamel,
	"first": first,
	"inc":   func(i int) int { return i + 1 },
	"format": func(s string, tabs int) string {
		s = strings.TrimPrefix(s, "Optional. ")
		s = strings.ReplaceAll(s, ".Example", ".\nExample")
		var (
			text    = strings.Fields(s)
			res     strings.Builder
			prefix  = "\n" + strings.Repeat("\t", tabs) + "// "
			padding = len(prefix) + 3*tabs
			count   = padding
		)
		for _, field := range text {
			// хз что тут будет с юникодом, но пофиг
			if count+len(field) >= maxInLine {
				res.WriteString(prefix)
				count = padding
			}
			if count != padding {
				res.WriteByte(' ')
				count += 1
			}
			res.WriteString(field)
			count += len(field)
		}
		return res.String()
	},
}

type Generator struct {
	schema *ApiSchema
	tmpl   *template.Template
}

func NewGenerator(schemaFile, tempaltesDir string) (*Generator, error) {
	file, err := os.Open(schemaFile)
	if err != nil {
		return nil, err
	}
	defer file.Close()

	var schema ApiSchema
	err = json.NewDecoder(file).Decode(&schema)
	if err != nil {
		return nil, err
	}

	tmpl := template.New("").
		Funcs(sprig.TxtFuncMap()).
		Funcs(funcs)

	tmpl, err = tmpl.ParseGlob(filepath.Join(tempaltesDir, "*.tmpl"))
	if err != nil {
		return nil, err
	}
	return &Generator{schema: &schema, tmpl: tmpl}, nil
}

func (g *Generator) Generate(outDir string) error {
	err := os.MkdirAll(outDir, os.ModePerm)
	if err != nil {
		return err
	}

	// TODO
	head := fmt.Sprintf("// Generated by: %s\n\npackage %s",
		strings.Join(
			append([]string{"go", "run", "github.com/Feresey/gen-tgbotapi/cmd/generator"},
				os.Args[1:]...,
			),
			" "),
		"api",
	)

	templateData := struct {
		Head          string
		RequiredOrder []bool
		*ApiSchema
		// map[typename][]value
		EnumTypes map[string][]string
	}{
		Head:          head,
		ApiSchema:     g.schema,
		RequiredOrder: []bool{true, false},
		EnumTypes:     g.getEnums(),
	}

	for _, tmpl := range g.tmpl.Templates() {
		name := strings.TrimSuffix(tmpl.Name(), ".tmpl")
		if name == "" {
			// main template
			continue
		}
		outName := filepath.Join(outDir, name+".go")
		log.Printf("Generating template %s", outName)
		out, err := os.Create(outName)
		if err != nil {
			return err
		}

		errExecute := tmpl.Execute(out, templateData)
		errClose := out.Close()
		if errExecute != nil || errClose != nil {
			return multierr.Append(errExecute, errClose)
		}
	}
	return nil
}

func (g *Generator) getEnums() map[string][]string {
	res := make(map[string][]string)
	for typename, typeDesc := range g.schema.Types {
		field, ok := typeDesc.Fields["type"]
		if !ok {
			continue
		}
		enumName := strcase.ToCamel(first(typename) + "_type")
		res[enumName] = append(res[enumName], oneof(field.Description.PlainText)...)
	}

	for idx, list := range res {
		res[idx] = unique(list)
	}
	res["ChatType"] = []string{"private", "group", "supergroup", "channel"}
	return res
}

func unique(ss []string) []string {
	unique := make(map[string]struct{})
	for _, s := range ss {
		unique[s] = struct{}{}
	}
	res := make([]string, 0, len(unique))
	for s := range unique {
		res = append(res, s)
	}
	return res
}

func oneof(text string) []string {
	parts := strings.Split(strings.ToLower(strings.TrimSuffix(text, ".")), "one of")
	if len(parts) != 2 {
		// if len(parts) == 1 {
		// parts[0] = strings.TrimPrefix(parts[0], "type of the result, must be contact ")
		// return parts
		// } else {
		log.Print("Not valid `oneof` retarded syntax: ", parts)
		return nil
		// }
	}

	values := strings.Split(strings.TrimSpace(parts[1]), ",")
	fmt.Println(values)
	for idx, value := range values {
		plain, err := strconv.Unquote(strings.TrimSpace(value))
		if err != nil {
			log.Printf("Try to unquote enum %q : %v", value, err)
			continue
		}
		values[idx] = plain
	}
	return values
}

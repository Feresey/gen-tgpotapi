package generator

import (
	"encoding/json"
	"errors"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/Masterminds/sprig/v3"
	"github.com/iancoleman/strcase"
	"go.uber.org/multierr"
)

const maxInLine = 100

var funcs = template.FuncMap{
	"camel": strcase.ToCamel,
	"format": func(s string, padding int) (string, error) {
		var (
			text  = strings.Fields(s)
			res   strings.Builder
			count = padding
		)
		if padding == 0 {
			padding = 3
		}
		if padding > 100*0.9 {
			return "", errors.New("padding too small")
		}
		for _, field := range text {
			// хз что тут будет с юникодом, но пофиг
			if count+len(field) >= maxInLine {
				res.WriteString("\n// ")
				count = padding
			} else {
				if count != padding {
					res.WriteByte(' ')
				}
				count += len(field) + 1
			}
			res.WriteString(field)
		}
		return res.String(), nil
	},
	"tabindent": func(tabs int, v string) string {
		pad := strings.Repeat("\t", tabs)
		return strings.Replace(v, "\n", "\n"+pad, -1)
	},
}

type Generator struct {
	schema *ApiSchema
	tmpl   *template.Template
}

func NewGenerator(schemaFile, tempaltesDir string) (*Generator, error) {
	file, err := os.Open(schemaFile)
	if err != nil {
		return nil, err
	}
	defer file.Close()

	var schema ApiSchema
	err = json.NewDecoder(file).Decode(&schema)
	if err != nil {
		return nil, err
	}

	tmpl := template.New("").
		Funcs(sprig.TxtFuncMap()).
		Funcs(funcs)

	tmpl, err = tmpl.ParseGlob(filepath.Join(tempaltesDir, "*.tmpl"))
	if err != nil {
		return nil, err
	}
	return &Generator{schema: &schema, tmpl: tmpl}, nil
}

func (g *Generator) Generate(outDir string) error {
	err := os.MkdirAll(outDir, os.ModePerm)
	if err != nil {
		return err
	}

	for _, tmpl := range g.tmpl.Templates() {
		name := strings.TrimSuffix(tmpl.Name(), ".tmpl")
		if name == "" {
			// main template
			continue
		}
		outName := filepath.Join(outDir, name+".go")
		log.Printf("Generating template %s", outName)
		out, err := os.Create(outName)
		if err != nil {
			return err
		}

		// TODO
		head := fmt.Sprintf("// Generated by %s\npackage %s",
			strings.Join(
				append([]string{"github.com/Feresey/gen-tgbotapi/cmd/generator"},
					os.Args[1:]...,
				),
				" "),
			"api",
		)

		data := struct {
			Head string
			*ApiSchema
		}{Head: head, ApiSchema: g.schema}

		errExecute := tmpl.Execute(out, data)
		errClose := out.Close()
		if errExecute != nil || errClose != nil {
			return multierr.Append(errExecute, errClose)
		}
	}
	return nil
}

{{.Head}}

{{range $method, $desc := .Methods}}
{{- if gt (len $desc.Arguments) 2 }}
type {{camel $method}} struct {
{{- range $idx, $put_required := $.RequiredOrder}}
{{- range $field_name, $field_desc := $desc.Arguments}}
	{{- $type := get_type $field_name $method $field_desc.Types }}

	{{- if eq $field_desc.Required $put_required}}
	// {{camel $field_name}}
	// {{format $field_desc.Description.PlainText 1}}
	{{camel $field_name}} {{if and (not $type.IsArray) (not $field_desc.Required) -}}
			*{{end -}}
		{{- $type.GoType}} `json:"{{$field_name}}{{if not $field_desc.Required}},omitempty{{end}}"`
	{{- end}}
{{- end}}
{{- end}}
}
{{- end}}
{{end}}

{{range $method, $desc := .Methods}}
// {{camel $method}}
// {{format $desc.Description.PlainText 0}}
func (api *API) {{camel $method}}(
{{- if gt (len $desc.Arguments) 2 -}}
args *{{camel $method}}
{{- else -}}
	{{- range $argname, $arg := $desc.Arguments}}
		{{- lowercamel $argname}} {{(get_type $argname $method $arg.Types).GoType}},
	{{- end}}
{{- end -}}
) (
{{- $returns := false}}
{{- with $desc.Returns}}
	{{- if (not (eq .GoType "True"))}}
		{{- if and (not .IsSimpleType) (not .IsArray)}}*{{end}}
		{{- .GoType}},
		{{- $returns = true}}
	{{- end}}
{{- end -}}
error) {
	return errors.New("not implemented")
}
{{end}}
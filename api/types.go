// Generated by github.com/Feresey/gen-tgbotapi/cmd/generator -t ./generator/tempaltes -o api -s ./schema/public/all.json
package api

// TODO: category description
// TODO: split by lines
// This object represents an animation file (GIF or H.264/MPEG-4 AVC video without sound).
type Animation struct {
	// duration:Duration of the video in seconds as defined by sender
	// Duration int64
	Duration int64 `json:"duration"`
	// file_id:Identifier for this file, which can be used to download or reuse the file
	// FileId string
	FileId string `json:"file_id"`
	// file_name:Optional. Original animation filename as defined by sender
	// file_size:Optional. File size
	// file_unique_id:Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
	// FileUniqueId string
	FileUniqueId string `json:"file_unique_id"`
	// height:Video height as defined by sender
	// Height int64
	Height int64 `json:"height"`
	// mime_type:Optional. MIME type of the file as defined by sender
	// thumb:Optional. Animation thumbnail as defined by sender
	// width:Video width as defined by sender
	// Width int64
	Width int64 `json:"width"`
}

// TODO: split by lines
// This object represents an audio file to be treated as music by the Telegram clients.
type Audio struct {
	// duration:Duration of the audio in seconds as defined by sender
	// Duration int64
	Duration int64 `json:"duration"`
	// file_id:Identifier for this file, which can be used to download or reuse the file
	// FileId string
	FileId string `json:"file_id"`
	// file_size:Optional. File size
	// file_unique_id:Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
	// FileUniqueId string
	FileUniqueId string `json:"file_unique_id"`
	// mime_type:Optional. MIME type of the file as defined by sender
	// performer:Optional. Performer of the audio as defined by sender or by audio tags
	// thumb:Optional. Thumbnail of the album cover to which the music file belongs
	// title:Optional. Title of the audio as defined by sender or by audio tags
}

// TODO: split by lines
// This object represents a bot command.
type BotCommand struct {
	// command:Text of the command, 1-32 characters. Can contain only lowercase English letters, digits and underscores.
	// Command string
	Command string `json:"command"`
	// description:Description of the command, 3-256 characters.
	// Description string
	Description string `json:"description"`
}

// TODO: split by lines
// A placeholder, currently holds no information. Use BotFather to set up your game.
type CallbackGame struct {
	// chat_id:Required if inline_message_id is not specified. Unique identifier for the target chat
	// disable_edit_message:Pass True, if the game message should not be automatically edited to include the current scoreboard
	// force:Pass True, if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters
	// inline_message_id:Required if chat_id and message_id are not specified. Identifier of the inline message
	// message_id:Required if inline_message_id is not specified. Identifier of the sent message
	// score:New score, must be non-negative
	// Score int64
	Score int64 `json:"score"`
	// user_id:User identifier
	// UserId int64
	UserId int64 `json:"user_id"`
}

// TODO: split by lines
// This object represents an incoming callback query from a callback button in an inline keyboard. If the button that originated the query was attached to a message sent by the bot, the field message will be present. If the button was attached to a message sent via the bot (in inline mode), the field inline_message_id will be present. Exactly one of the fields data or game_short_name will be present.
type CallbackQuery struct {
	// chat_instance:Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in games.
	// ChatInstance string
	ChatInstance string `json:"chat_instance"`
	// data:Optional. Data associated with the callback button. Be aware that a bad client can send arbitrary data in this field.
	// from:Sender
	// From User
	From User `json:"from"`
	// game_short_name:Optional. Short name of a Game to be returned, serves as the unique identifier for the game
	// id:Unique identifier for this query
	// Id string
	Id string `json:"id"`
	// inline_message_id:Optional. Identifier of the message sent via the bot in inline mode, that originated the query.
	// message:Optional. Message with the callback button that originated the query. Note that message content and message date will not be available if the message is too old
}

// TODO: split by lines
// This object represents a chat.
type Chat struct {
	// can_set_sticker_set:Optional. True, if the bot can change the group sticker set. Returned only in getChat.
	// description:Optional. Description, for groups, supergroups and channel chats. Returned only in getChat.
	// first_name:Optional. First name of the other party in a private chat
	// id:Unique identifier for this chat. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
	// Id int64
	Id int64 `json:"id"`
	// invite_link:Optional. Chat invite link, for groups, supergroups and channel chats. Each administrator in a chat generates their own invite links, so the bot must first generate the link using exportChatInviteLink. Returned only in getChat.
	// last_name:Optional. Last name of the other party in a private chat
	// permissions:Optional. Default chat member permissions, for groups and supergroups. Returned only in getChat.
	// photo:Optional. Chat photo. Returned only in getChat.
	// pinned_message:Optional. Pinned message, for groups, supergroups and channels. Returned only in getChat.
	// slow_mode_delay:Optional. For supergroups, the minimum allowed delay between consecutive messages sent by each unpriviledged user. Returned only in getChat.
	// sticker_set_name:Optional. For supergroups, name of group sticker set. Returned only in getChat.
	// title:Optional. Title, for supergroups, channels and group chats
	// type:Type of chat, can be either "private", "group", "supergroup" or "channel"
	// Type string
	Type string `json:"type"`
	// username:Optional. Username, for private chats, supergroups and channels if available
}

// TODO: split by lines
// This object contains information about one member of a chat.
type ChatMember struct {
	// can_add_web_page_previews:Optional. Restricted only. True, if the user is allowed to add web page previews to their messages
	// can_be_edited:Optional. Administrators only. True, if the bot is allowed to edit administrator privileges of that user
	// can_change_info:Optional. Administrators and restricted only. True, if the user is allowed to change the chat title, photo and other settings
	// can_delete_messages:Optional. Administrators only. True, if the administrator can delete messages of other users
	// can_edit_messages:Optional. Administrators only. True, if the administrator can edit messages of other users and can pin messages; channels only
	// can_invite_users:Optional. Administrators and restricted only. True, if the user is allowed to invite new users to the chat
	// can_pin_messages:Optional. Administrators and restricted only. True, if the user is allowed to pin messages; groups and supergroups only
	// can_post_messages:Optional. Administrators only. True, if the administrator can post in the channel; channels only
	// can_promote_members:Optional. Administrators only. True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by the user)
	// can_restrict_members:Optional. Administrators only. True, if the administrator can restrict, ban or unban chat members
	// can_send_media_messages:Optional. Restricted only. True, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes
	// can_send_messages:Optional. Restricted only. True, if the user is allowed to send text messages, contacts, locations and venues
	// can_send_other_messages:Optional. Restricted only. True, if the user is allowed to send animations, games, stickers and use inline bots
	// can_send_polls:Optional. Restricted only. True, if the user is allowed to send polls
	// custom_title:Optional. Owner and administrators only. Custom title for this user
	// is_member:Optional. Restricted only. True, if the user is a member of the chat at the moment of the request
	// status:The member's status in the chat. Can be "creator", "administrator", "member", "restricted", "left" or "kicked"
	// Status string
	Status string `json:"status"`
	// until_date:Optional. Restricted and kicked only. Date when restrictions will be lifted for this user; unix time
	// user:Information about the user
	// User User
	User User `json:"user"`
}

// TODO: split by lines
// Describes actions that a non-administrator user is allowed to take in a chat.
type ChatPermissions struct {
	// can_add_web_page_previews:Optional. True, if the user is allowed to add web page previews to their messages, implies can_send_media_messages
	// can_change_info:Optional. True, if the user is allowed to change the chat title, photo and other settings. Ignored in public supergroups
	// can_invite_users:Optional. True, if the user is allowed to invite new users to the chat
	// can_pin_messages:Optional. True, if the user is allowed to pin messages. Ignored in public supergroups
	// can_send_media_messages:Optional. True, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes, implies can_send_messages
	// can_send_messages:Optional. True, if the user is allowed to send text messages, contacts, locations and venues
	// can_send_other_messages:Optional. True, if the user is allowed to send animations, games, stickers and use inline bots, implies can_send_media_messages
	// can_send_polls:Optional. True, if the user is allowed to send polls, implies can_send_messages
}

// TODO: split by lines
// This object represents a chat photo.
type ChatPhoto struct {
	// big_file_id:File identifier of big (640x640) chat photo. This file_id can be used only for photo download and only for as long as the photo is not changed.
	// BigFileId string
	BigFileId string `json:"big_file_id"`
	// big_file_unique_id:Unique file identifier of big (640x640) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
	// BigFileUniqueId string
	BigFileUniqueId string `json:"big_file_unique_id"`
	// small_file_id:File identifier of small (160x160) chat photo. This file_id can be used only for photo download and only for as long as the photo is not changed.
	// SmallFileId string
	SmallFileId string `json:"small_file_id"`
	// small_file_unique_id:Unique file identifier of small (160x160) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
	// SmallFileUniqueId string
	SmallFileUniqueId string `json:"small_file_unique_id"`
}

// TODO: split by lines
// Represents a result of an inline query that was chosen by the user and sent to their chat partner.
type ChosenInlineResult struct {
	// from:The user that chose the result
	// From User
	From User `json:"from"`
	// inline_message_id:Optional. Identifier of the sent inline message. Available only if there is an inline keyboard attached to the message. Will be also received in callback queries and can be used to edit the message.
	// location:Optional. Sender location, only for bots that require user location
	// query:The query that was used to obtain the result
	// Query string
	Query string `json:"query"`
	// result_id:The unique identifier for the result that was chosen
	// ResultId string
	ResultId string `json:"result_id"`
}

// TODO: split by lines
// This object represents a phone contact.
type Contact struct {
	// first_name:Contact's first name
	// FirstName string
	FirstName string `json:"first_name"`
	// last_name:Optional. Contact's last name
	// phone_number:Contact's phone number
	// PhoneNumber string
	PhoneNumber string `json:"phone_number"`
	// user_id:Optional. Contact's user identifier in Telegram
	// vcard:Optional. Additional data about the contact in the form of a vCard
}

// TODO: split by lines
// This object represents an animated emoji that displays a random value.
type Dice struct {
	// emoji:Emoji on which the dice throw animation is based
	// Emoji string
	Emoji string `json:"emoji"`
	// value:Value of the dice, 1-6 for "" and "" base emoji, 1-5 for "" base emoji
	// Value int64
	Value int64 `json:"value"`
}

// TODO: split by lines
// This object represents a general file (as opposed to photos, voice messages and audio files).
type Document struct {
	// file_id:Identifier for this file, which can be used to download or reuse the file
	// FileId string
	FileId string `json:"file_id"`
	// file_name:Optional. Original filename as defined by sender
	// file_size:Optional. File size
	// file_unique_id:Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
	// FileUniqueId string
	FileUniqueId string `json:"file_unique_id"`
	// mime_type:Optional. MIME type of the file as defined by sender
	// thumb:Optional. Document thumbnail as defined by sender
}

// TODO: split by lines
// Contains data required for decrypting and authenticating EncryptedPassportElement. See the Telegram Passport Documentation for a complete description of the data decryption and authentication processes.
type EncryptedCredentials struct {
	// data:Base64-encoded encrypted JSON-serialized data with unique user's payload, data hashes and secrets required for EncryptedPassportElement decryption and authentication
	// Data string
	Data string `json:"data"`
	// hash:Base64-encoded data hash for data authentication
	// Hash string
	Hash string `json:"hash"`
	// secret:Base64-encoded secret, encrypted with the bot's public RSA key, required for data decryption
	// Secret string
	Secret string `json:"secret"`
}

// TODO: split by lines
// Contains information about documents or other Telegram Passport elements shared with the bot by the user.
type EncryptedPassportElement struct {
	// data:Optional. Base64-encoded encrypted Telegram Passport element data provided by the user, available for "personal_details", "passport", "driver_license", "identity_card", "internal_passport" and "address" types. Can be decrypted and verified using the accompanying EncryptedCredentials.
	// email:Optional. User's verified email address, available only for "email" type
	// files:Optional. Array of encrypted files with documents provided by the user, available for "utility_bill", "bank_statement", "rental_agreement", "passport_registration" and "temporary_registration" types. Files can be decrypted and verified using the accompanying EncryptedCredentials.
	// front_side:Optional. Encrypted file with the front side of the document, provided by the user. Available for "passport", "driver_license", "identity_card" and "internal_passport". The file can be decrypted and verified using the accompanying EncryptedCredentials.
	// hash:Base64-encoded element hash for using in PassportElementErrorUnspecified
	// Hash string
	Hash string `json:"hash"`
	// phone_number:Optional. User's verified phone number, available only for "phone_number" type
	// reverse_side:Optional. Encrypted file with the reverse side of the document, provided by the user. Available for "driver_license" and "identity_card". The file can be decrypted and verified using the accompanying EncryptedCredentials.
	// selfie:Optional. Encrypted file with the selfie of the user holding a document, provided by the user; available for "passport", "driver_license", "identity_card" and "internal_passport". The file can be decrypted and verified using the accompanying EncryptedCredentials.
	// translation:Optional. Array of encrypted files with translated versions of documents provided by the user. Available if requested for "passport", "driver_license", "identity_card", "internal_passport", "utility_bill", "bank_statement", "rental_agreement", "passport_registration" and "temporary_registration" types. Files can be decrypted and verified using the accompanying EncryptedCredentials.
	// type:Element type. One of "personal_details", "passport", "driver_license", "identity_card", "internal_passport", "address", "utility_bill", "bank_statement", "rental_agreement", "passport_registration", "temporary_registration", "phone_number", "email".
	// Type string
	Type string `json:"type"`
}

// TODO: split by lines
// This object represents a file ready to be downloaded. The file can be downloaded via the link https://api.telegram.org/file/bot<token>/<file_path>. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling getFile.
type File struct {
	// file_id:Identifier for this file, which can be used to download or reuse the file
	// FileId string
	FileId string `json:"file_id"`
	// file_path:Optional. File path. Use https://api.telegram.org/file/bot<token>/<file_path> to get the file.
	// file_size:Optional. File size, if known
	// file_unique_id:Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
	// FileUniqueId string
	FileUniqueId string `json:"file_unique_id"`
}

// TODO: split by lines
// Upon receiving a message with this object, Telegram clients will display a reply interface to the user (act as if the user has selected the bot's message and tapped 'Reply'). This can be extremely useful if you want to create user-friendly step-by-step interfaces without having to sacrifice privacy mode.
type ForceReply struct {
	// force_reply:Shows reply interface to the user, as if they manually selected the bot's message and tapped 'Reply'
	// ForceReply bool
	ForceReply bool `json:"force_reply"`
	// selective:Optional. Use this parameter if you want to force reply from specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has reply_to_message_id), sender of the original message.
}

// TODO: split by lines
// This object represents a game. Use BotFather to create and edit games, their short names will act as unique identifiers.
type Game struct {
	// animation:Optional. Animation that will be displayed in the game message in chats. Upload via BotFather
	// description:Description of the game
	// Description string
	Description string `json:"description"`
	// photo:Photo that will be displayed in the game message in chats.
	// Photo []PhotoSize
	Photo []PhotoSize `json:"photo"`
	// text:Optional. Brief description of the game or high scores included in the game message. Can be automatically edited to include current high scores for the game when the bot calls setGameScore, or manually edited using editMessageText. 0-4096 characters.
	// text_entities:Optional. Special entities that appear in text, such as usernames, URLs, bot commands, etc.
	// title:Title of the game
	// Title string
	Title string `json:"title"`
}

// TODO: split by lines
// This object represents one row of the high scores table for a game.
type GameHighScore struct {
	// position:Position in high score table for the game
	// Position int64
	Position int64 `json:"position"`
	// score:Score
	// Score int64
	Score int64 `json:"score"`
	// user:User
	// User User
	User User `json:"user"`
}

// TODO: split by lines
// Your bot can offer users HTML5 games to play solo or to compete against each other in groups and one-on-one chats. Create games via @BotFather using the /newgame command. Please note that this kind of power requires responsibility: you will need to accept the terms for each game that your bots will be offering.
type Games struct {
	// chat_id:Unique identifier for the target chat
	// ChatId int64
	ChatId int64 `json:"chat_id"`
	// disable_notification:Sends the message silently. Users will receive a notification with no sound.
	// game_short_name:Short name of the game, serves as the unique identifier for the game. Set up your games via Botfather.
	// GameShortName string
	GameShortName string `json:"game_short_name"`
	// reply_markup:A JSON-serialized object for an inline keyboard. If empty, one 'Play game_title' button will be shown. If not empty, the first button must launch the game.
	// reply_to_message_id:If the message is a reply, ID of the original message
}

// TODO: split by lines
// This object represents one button of an inline keyboard. You must use exactly one of the optional fields.
type InlineKeyboardButton struct {
	// callback_data:Optional. Data to be sent in a callback query to the bot when button is pressed, 1-64 bytes
	// callback_game:Optional. Description of the game that will be launched when the user presses the button.NOTE: This type of button must always be the first button in the first row.
	// login_url:Optional. An HTTP URL used to automatically authorize the user. Can be used as a replacement for the Telegram Login Widget.
	// pay:Optional. Specify True, to send a Pay button.NOTE: This type of button must always be the first button in the first row.
	// switch_inline_query:Optional. If set, pressing the button will prompt the user to select one of their chats, open that chat and insert the bot's username and the specified inline query in the input field. Can be empty, in which case just the bot's username will be inserted.Note: This offers an easy way for users to start using your bot in inline mode when they are currently in a private chat with it. Especially useful when combined with switch_pm… actions - in this case the user will be automatically returned to the chat they switched from, skipping the chat selection screen.
	// switch_inline_query_current_chat:Optional. If set, pressing the button will insert the bot's username and the specified inline query in the current chat's input field. Can be empty, in which case only the bot's username will be inserted.This offers a quick way for the user to open your bot in inline mode in the same chat - good for selecting something from multiple options.
	// text:Label text on the button
	// Text string
	Text string `json:"text"`
	// url:Optional. HTTP or tg:// url to be opened when button is pressed
}

// TODO: split by lines
// This object represents an inline keyboard that appears right next to the message it belongs to.
type InlineKeyboardMarkup struct {
	// inline_keyboard:Array of button rows, each represented by an Array of InlineKeyboardButton objects
	// InlineKeyboard [][]InlineKeyboardButton
	InlineKeyboard [][]InlineKeyboardButton `json:"inline_keyboard"`
}

// TODO: split by lines
// This object represents an incoming inline query. When the user sends an empty query, your bot could return some default or trending results.
type InlineQuery struct {
	// from:Sender
	// From User
	From User `json:"from"`
	// id:Unique identifier for this query
	// Id string
	Id string `json:"id"`
	// location:Optional. Sender location, only for bots that request user location
	// offset:Offset of the results to be returned, can be controlled by the bot
	// Offset string
	Offset string `json:"offset"`
	// query:Text of the query (up to 256 characters)
	// Query string
	Query string `json:"query"`
}

// TODO: split by lines
// This object represents one result of an inline query. Telegram clients currently support results of the following 20 types:
type InlineQueryResult struct {
	// description:Optional. Short description of the result
	// hide_url:Optional. Pass True, if you don't want the URL to be shown in the message
	// id:Unique identifier for this result, 1-64 Bytes
	// Id string
	Id string `json:"id"`
	// input_message_content:Content of the message to be sent
	// InputMessageContent InputMessageContent
	InputMessageContent InputMessageContent `json:"input_message_content"`
	// reply_markup:Optional. Inline keyboard attached to the message
	// thumb_height:Optional. Thumbnail height
	// thumb_url:Optional. Url of the thumbnail for the result
	// thumb_width:Optional. Thumbnail width
	// title:Title of the result
	// Title string
	Title string `json:"title"`
	// type:Type of the result, must be article
	// Type string
	Type string `json:"type"`
	// url:Optional. URL of the result
}

// TODO: split by lines
// Represents a link to an article or web page.
type InlineQueryResultArticle struct {
	// description:Optional. Short description of the result
	// hide_url:Optional. Pass True, if you don't want the URL to be shown in the message
	// id:Unique identifier for this result, 1-64 Bytes
	// Id string
	Id string `json:"id"`
	// input_message_content:Content of the message to be sent
	// InputMessageContent InputMessageContent
	InputMessageContent InputMessageContent `json:"input_message_content"`
	// reply_markup:Optional. Inline keyboard attached to the message
	// thumb_height:Optional. Thumbnail height
	// thumb_url:Optional. Url of the thumbnail for the result
	// thumb_width:Optional. Thumbnail width
	// title:Title of the result
	// Title string
	Title string `json:"title"`
	// type:Type of the result, must be article
	// Type string
	Type string `json:"type"`
	// url:Optional. URL of the result
}

// TODO: split by lines
// Represents a link to an MP3 audio file. By default, this audio file will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the audio.
type InlineQueryResultAudio struct {
	// audio_duration:Optional. Audio duration in seconds
	// audio_url:A valid URL for the audio file
	// AudioUrl string
	AudioUrl string `json:"audio_url"`
	// caption:Optional. Caption, 0-1024 characters after entities parsing
	// id:Unique identifier for this result, 1-64 bytes
	// Id string
	Id string `json:"id"`
	// input_message_content:Optional. Content of the message to be sent instead of the audio
	// parse_mode:Optional. Mode for parsing entities in the audio caption. See formatting options for more details.
	// performer:Optional. Performer
	// reply_markup:Optional. Inline keyboard attached to the message
	// title:Title
	// Title string
	Title string `json:"title"`
	// type:Type of the result, must be audio
	// Type string
	Type string `json:"type"`
}

// TODO: split by lines
// Represents a link to an MP3 audio file stored on the Telegram servers. By default, this audio file will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the audio.
type InlineQueryResultCachedAudio struct {
	// audio_file_id:A valid file identifier for the audio file
	// AudioFileId string
	AudioFileId string `json:"audio_file_id"`
	// caption:Optional. Caption, 0-1024 characters after entities parsing
	// id:Unique identifier for this result, 1-64 bytes
	// Id string
	Id string `json:"id"`
	// input_message_content:Optional. Content of the message to be sent instead of the audio
	// parse_mode:Optional. Mode for parsing entities in the audio caption. See formatting options for more details.
	// reply_markup:Optional. Inline keyboard attached to the message
	// type:Type of the result, must be audio
	// Type string
	Type string `json:"type"`
}

// TODO: split by lines
// Represents a link to a file stored on the Telegram servers. By default, this file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the file.
type InlineQueryResultCachedDocument struct {
	// caption:Optional. Caption of the document to be sent, 0-1024 characters after entities parsing
	// description:Optional. Short description of the result
	// document_file_id:A valid file identifier for the file
	// DocumentFileId string
	DocumentFileId string `json:"document_file_id"`
	// id:Unique identifier for this result, 1-64 bytes
	// Id string
	Id string `json:"id"`
	// input_message_content:Optional. Content of the message to be sent instead of the file
	// parse_mode:Optional. Mode for parsing entities in the document caption. See formatting options for more details.
	// reply_markup:Optional. Inline keyboard attached to the message
	// title:Title for the result
	// Title string
	Title string `json:"title"`
	// type:Type of the result, must be document
	// Type string
	Type string `json:"type"`
}

// TODO: split by lines
// Represents a link to an animated GIF file stored on the Telegram servers. By default, this animated GIF file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with specified content instead of the animation.
type InlineQueryResultCachedGif struct {
	// caption:Optional. Caption of the GIF file to be sent, 0-1024 characters after entities parsing
	// gif_file_id:A valid file identifier for the GIF file
	// GifFileId string
	GifFileId string `json:"gif_file_id"`
	// id:Unique identifier for this result, 1-64 bytes
	// Id string
	Id string `json:"id"`
	// input_message_content:Optional. Content of the message to be sent instead of the GIF animation
	// parse_mode:Optional. Mode for parsing entities in the caption. See formatting options for more details.
	// reply_markup:Optional. Inline keyboard attached to the message
	// title:Optional. Title for the result
	// type:Type of the result, must be gif
	// Type string
	Type string `json:"type"`
}

// TODO: split by lines
// Represents a link to a video animation (H.264/MPEG-4 AVC video without sound) stored on the Telegram servers. By default, this animated MPEG-4 file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the animation.
type InlineQueryResultCachedMpeg4Gif struct {
	// caption:Optional. Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing
	// id:Unique identifier for this result, 1-64 bytes
	// Id string
	Id string `json:"id"`
	// input_message_content:Optional. Content of the message to be sent instead of the video animation
	// mpeg4_file_id:A valid file identifier for the MP4 file
	// Mpeg4FileId string
	Mpeg4FileId string `json:"mpeg4_file_id"`
	// parse_mode:Optional. Mode for parsing entities in the caption. See formatting options for more details.
	// reply_markup:Optional. Inline keyboard attached to the message
	// title:Optional. Title for the result
	// type:Type of the result, must be mpeg4_gif
	// Type string
	Type string `json:"type"`
}

// TODO: split by lines
// Represents a link to a photo stored on the Telegram servers. By default, this photo will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the photo.
type InlineQueryResultCachedPhoto struct {
	// caption:Optional. Caption of the photo to be sent, 0-1024 characters after entities parsing
	// description:Optional. Short description of the result
	// id:Unique identifier for this result, 1-64 bytes
	// Id string
	Id string `json:"id"`
	// input_message_content:Optional. Content of the message to be sent instead of the photo
	// parse_mode:Optional. Mode for parsing entities in the photo caption. See formatting options for more details.
	// photo_file_id:A valid file identifier of the photo
	// PhotoFileId string
	PhotoFileId string `json:"photo_file_id"`
	// reply_markup:Optional. Inline keyboard attached to the message
	// title:Optional. Title for the result
	// type:Type of the result, must be photo
	// Type string
	Type string `json:"type"`
}

// TODO: split by lines
// Represents a link to a sticker stored on the Telegram servers. By default, this sticker will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the sticker.
type InlineQueryResultCachedSticker struct {
	// id:Unique identifier for this result, 1-64 bytes
	// Id string
	Id string `json:"id"`
	// input_message_content:Optional. Content of the message to be sent instead of the sticker
	// reply_markup:Optional. Inline keyboard attached to the message
	// sticker_file_id:A valid file identifier of the sticker
	// StickerFileId string
	StickerFileId string `json:"sticker_file_id"`
	// type:Type of the result, must be sticker
	// Type string
	Type string `json:"type"`
}

// TODO: split by lines
// Represents a link to a video file stored on the Telegram servers. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the video.
type InlineQueryResultCachedVideo struct {
	// caption:Optional. Caption of the video to be sent, 0-1024 characters after entities parsing
	// description:Optional. Short description of the result
	// id:Unique identifier for this result, 1-64 bytes
	// Id string
	Id string `json:"id"`
	// input_message_content:Optional. Content of the message to be sent instead of the video
	// parse_mode:Optional. Mode for parsing entities in the video caption. See formatting options for more details.
	// reply_markup:Optional. Inline keyboard attached to the message
	// title:Title for the result
	// Title string
	Title string `json:"title"`
	// type:Type of the result, must be video
	// Type string
	Type string `json:"type"`
	// video_file_id:A valid file identifier for the video file
	// VideoFileId string
	VideoFileId string `json:"video_file_id"`
}

// TODO: split by lines
// Represents a link to a voice message stored on the Telegram servers. By default, this voice message will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the voice message.
type InlineQueryResultCachedVoice struct {
	// caption:Optional. Caption, 0-1024 characters after entities parsing
	// id:Unique identifier for this result, 1-64 bytes
	// Id string
	Id string `json:"id"`
	// input_message_content:Optional. Content of the message to be sent instead of the voice message
	// parse_mode:Optional. Mode for parsing entities in the voice message caption. See formatting options for more details.
	// reply_markup:Optional. Inline keyboard attached to the message
	// title:Voice message title
	// Title string
	Title string `json:"title"`
	// type:Type of the result, must be voice
	// Type string
	Type string `json:"type"`
	// voice_file_id:A valid file identifier for the voice message
	// VoiceFileId string
	VoiceFileId string `json:"voice_file_id"`
}

// TODO: split by lines
// Represents a contact with a phone number. By default, this contact will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the contact.
type InlineQueryResultContact struct {
	// first_name:Contact's first name
	// FirstName string
	FirstName string `json:"first_name"`
	// id:Unique identifier for this result, 1-64 Bytes
	// Id string
	Id string `json:"id"`
	// input_message_content:Optional. Content of the message to be sent instead of the contact
	// last_name:Optional. Contact's last name
	// phone_number:Contact's phone number
	// PhoneNumber string
	PhoneNumber string `json:"phone_number"`
	// reply_markup:Optional. Inline keyboard attached to the message
	// thumb_height:Optional. Thumbnail height
	// thumb_url:Optional. Url of the thumbnail for the result
	// thumb_width:Optional. Thumbnail width
	// type:Type of the result, must be contact
	// Type string
	Type string `json:"type"`
	// vcard:Optional. Additional data about the contact in the form of a vCard, 0-2048 bytes
}

// TODO: split by lines
// Represents a link to a file. By default, this file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the file. Currently, only .PDF and .ZIP files can be sent using this method.
type InlineQueryResultDocument struct {
	// caption:Optional. Caption of the document to be sent, 0-1024 characters after entities parsing
	// description:Optional. Short description of the result
	// document_url:A valid URL for the file
	// DocumentUrl string
	DocumentUrl string `json:"document_url"`
	// id:Unique identifier for this result, 1-64 bytes
	// Id string
	Id string `json:"id"`
	// input_message_content:Optional. Content of the message to be sent instead of the file
	// mime_type:Mime type of the content of the file, either "application/pdf" or "application/zip"
	// MimeType string
	MimeType string `json:"mime_type"`
	// parse_mode:Optional. Mode for parsing entities in the document caption. See formatting options for more details.
	// reply_markup:Optional. Inline keyboard attached to the message
	// thumb_height:Optional. Thumbnail height
	// thumb_url:Optional. URL of the thumbnail (jpeg only) for the file
	// thumb_width:Optional. Thumbnail width
	// title:Title for the result
	// Title string
	Title string `json:"title"`
	// type:Type of the result, must be document
	// Type string
	Type string `json:"type"`
}

// TODO: split by lines
// Represents a Game.
type InlineQueryResultGame struct {
	// game_short_name:Short name of the game
	// GameShortName string
	GameShortName string `json:"game_short_name"`
	// id:Unique identifier for this result, 1-64 bytes
	// Id string
	Id string `json:"id"`
	// reply_markup:Optional. Inline keyboard attached to the message
	// type:Type of the result, must be game
	// Type string
	Type string `json:"type"`
}

// TODO: split by lines
// Represents a link to an animated GIF file. By default, this animated GIF file will be sent by the user with optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the animation.
type InlineQueryResultGif struct {
	// caption:Optional. Caption of the GIF file to be sent, 0-1024 characters after entities parsing
	// gif_duration:Optional. Duration of the GIF
	// gif_height:Optional. Height of the GIF
	// gif_url:A valid URL for the GIF file. File size must not exceed 1MB
	// GifUrl string
	GifUrl string `json:"gif_url"`
	// gif_width:Optional. Width of the GIF
	// id:Unique identifier for this result, 1-64 bytes
	// Id string
	Id string `json:"id"`
	// input_message_content:Optional. Content of the message to be sent instead of the GIF animation
	// parse_mode:Optional. Mode for parsing entities in the caption. See formatting options for more details.
	// reply_markup:Optional. Inline keyboard attached to the message
	// thumb_mime_type:Optional. MIME type of the thumbnail, must be one of "image/jpeg", "image/gif", or "video/mp4". Defaults to "image/jpeg"
	// thumb_url:URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result
	// ThumbUrl string
	ThumbUrl string `json:"thumb_url"`
	// title:Optional. Title for the result
	// type:Type of the result, must be gif
	// Type string
	Type string `json:"type"`
}

// TODO: split by lines
// Represents a location on a map. By default, the location will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the location.
type InlineQueryResultLocation struct {
	// id:Unique identifier for this result, 1-64 Bytes
	// Id string
	Id string `json:"id"`
	// input_message_content:Optional. Content of the message to be sent instead of the location
	// latitude:Location latitude in degrees
	// Latitude float64
	Latitude float64 `json:"latitude"`
	// live_period:Optional. Period in seconds for which the location can be updated, should be between 60 and 86400.
	// longitude:Location longitude in degrees
	// Longitude float64
	Longitude float64 `json:"longitude"`
	// reply_markup:Optional. Inline keyboard attached to the message
	// thumb_height:Optional. Thumbnail height
	// thumb_url:Optional. Url of the thumbnail for the result
	// thumb_width:Optional. Thumbnail width
	// title:Location title
	// Title string
	Title string `json:"title"`
	// type:Type of the result, must be location
	// Type string
	Type string `json:"type"`
}

// TODO: split by lines
// Represents a link to a video animation (H.264/MPEG-4 AVC video without sound). By default, this animated MPEG-4 file will be sent by the user with optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the animation.
type InlineQueryResultMpeg4Gif struct {
	// caption:Optional. Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing
	// id:Unique identifier for this result, 1-64 bytes
	// Id string
	Id string `json:"id"`
	// input_message_content:Optional. Content of the message to be sent instead of the video animation
	// mpeg4_duration:Optional. Video duration
	// mpeg4_height:Optional. Video height
	// mpeg4_url:A valid URL for the MP4 file. File size must not exceed 1MB
	// Mpeg4Url string
	Mpeg4Url string `json:"mpeg4_url"`
	// mpeg4_width:Optional. Video width
	// parse_mode:Optional. Mode for parsing entities in the caption. See formatting options for more details.
	// reply_markup:Optional. Inline keyboard attached to the message
	// thumb_mime_type:Optional. MIME type of the thumbnail, must be one of "image/jpeg", "image/gif", or "video/mp4". Defaults to "image/jpeg"
	// thumb_url:URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result
	// ThumbUrl string
	ThumbUrl string `json:"thumb_url"`
	// title:Optional. Title for the result
	// type:Type of the result, must be mpeg4_gif
	// Type string
	Type string `json:"type"`
}

// TODO: split by lines
// Represents a link to a photo. By default, this photo will be sent by the user with optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the photo.
type InlineQueryResultPhoto struct {
	// caption:Optional. Caption of the photo to be sent, 0-1024 characters after entities parsing
	// description:Optional. Short description of the result
	// id:Unique identifier for this result, 1-64 bytes
	// Id string
	Id string `json:"id"`
	// input_message_content:Optional. Content of the message to be sent instead of the photo
	// parse_mode:Optional. Mode for parsing entities in the photo caption. See formatting options for more details.
	// photo_height:Optional. Height of the photo
	// photo_url:A valid URL of the photo. Photo must be in jpeg format. Photo size must not exceed 5MB
	// PhotoUrl string
	PhotoUrl string `json:"photo_url"`
	// photo_width:Optional. Width of the photo
	// reply_markup:Optional. Inline keyboard attached to the message
	// thumb_url:URL of the thumbnail for the photo
	// ThumbUrl string
	ThumbUrl string `json:"thumb_url"`
	// title:Optional. Title for the result
	// type:Type of the result, must be photo
	// Type string
	Type string `json:"type"`
}

// TODO: split by lines
// Represents a venue. By default, the venue will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the venue.
type InlineQueryResultVenue struct {
	// address:Address of the venue
	// Address string
	Address string `json:"address"`
	// foursquare_id:Optional. Foursquare identifier of the venue if known
	// foursquare_type:Optional. Foursquare type of the venue, if known. (For example, "arts_entertainment/default", "arts_entertainment/aquarium" or "food/icecream".)
	// id:Unique identifier for this result, 1-64 Bytes
	// Id string
	Id string `json:"id"`
	// input_message_content:Optional. Content of the message to be sent instead of the venue
	// latitude:Latitude of the venue location in degrees
	// Latitude float64
	Latitude float64 `json:"latitude"`
	// longitude:Longitude of the venue location in degrees
	// Longitude float64
	Longitude float64 `json:"longitude"`
	// reply_markup:Optional. Inline keyboard attached to the message
	// thumb_height:Optional. Thumbnail height
	// thumb_url:Optional. Url of the thumbnail for the result
	// thumb_width:Optional. Thumbnail width
	// title:Title of the venue
	// Title string
	Title string `json:"title"`
	// type:Type of the result, must be venue
	// Type string
	Type string `json:"type"`
}

// TODO: split by lines
// Represents a link to a page containing an embedded video player or a video file. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the video.
type InlineQueryResultVideo struct {
	// caption:Optional. Caption of the video to be sent, 0-1024 characters after entities parsing
	// description:Optional. Short description of the result
	// id:Unique identifier for this result, 1-64 bytes
	// Id string
	Id string `json:"id"`
	// input_message_content:Optional. Content of the message to be sent instead of the video. This field is required if InlineQueryResultVideo is used to send an HTML-page as a result (e.g., a YouTube video).
	// mime_type:Mime type of the content of video url, "text/html" or "video/mp4"
	// MimeType string
	MimeType string `json:"mime_type"`
	// parse_mode:Optional. Mode for parsing entities in the video caption. See formatting options for more details.
	// reply_markup:Optional. Inline keyboard attached to the message
	// thumb_url:URL of the thumbnail (jpeg only) for the video
	// ThumbUrl string
	ThumbUrl string `json:"thumb_url"`
	// title:Title for the result
	// Title string
	Title string `json:"title"`
	// type:Type of the result, must be video
	// Type string
	Type string `json:"type"`
	// video_duration:Optional. Video duration in seconds
	// video_height:Optional. Video height
	// video_url:A valid URL for the embedded video player or video file
	// VideoUrl string
	VideoUrl string `json:"video_url"`
	// video_width:Optional. Video width
}

// TODO: split by lines
// Represents a link to a voice recording in an .OGG container encoded with OPUS. By default, this voice recording will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the the voice message.
type InlineQueryResultVoice struct {
	// caption:Optional. Caption, 0-1024 characters after entities parsing
	// id:Unique identifier for this result, 1-64 bytes
	// Id string
	Id string `json:"id"`
	// input_message_content:Optional. Content of the message to be sent instead of the voice recording
	// parse_mode:Optional. Mode for parsing entities in the voice message caption. See formatting options for more details.
	// reply_markup:Optional. Inline keyboard attached to the message
	// title:Recording title
	// Title string
	Title string `json:"title"`
	// type:Type of the result, must be voice
	// Type string
	Type string `json:"type"`
	// voice_duration:Optional. Recording duration in seconds
	// voice_url:A valid URL for the voice recording
	// VoiceUrl string
	VoiceUrl string `json:"voice_url"`
}

// TODO: split by lines
// Represents the content of a contact message to be sent as the result of an inline query.
type InputContactMessageContent struct {
	// first_name:Contact's first name
	// FirstName string
	FirstName string `json:"first_name"`
	// last_name:Optional. Contact's last name
	// phone_number:Contact's phone number
	// PhoneNumber string
	PhoneNumber string `json:"phone_number"`
	// vcard:Optional. Additional data about the contact in the form of a vCard, 0-2048 bytes
}

// TODO: split by lines
// This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser.
type InputFile struct {
	// chat_id:Unique identifier for the target chat or username of the target channel (in the format @channelusername)
	// ChatId int64
	ChatId int64 `json:"chat_id"`
	// disable_notification:Sends the message silently. Users will receive a notification with no sound.
	// disable_web_page_preview:Disables link previews for links in this message
	// parse_mode:Mode for parsing entities in the message text. See formatting options for more details.
	// reply_markup:Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
	// reply_to_message_id:If the message is a reply, ID of the original message
	// text:Text of the message to be sent, 1-4096 characters after entities parsing
	// Text string
	Text string `json:"text"`
}

// TODO: split by lines
// Represents the content of a location message to be sent as the result of an inline query.
type InputLocationMessageContent struct {
	// latitude:Latitude of the location in degrees
	// Latitude float64
	Latitude float64 `json:"latitude"`
	// live_period:Optional. Period in seconds for which the location can be updated, should be between 60 and 86400.
	// longitude:Longitude of the location in degrees
	// Longitude float64
	Longitude float64 `json:"longitude"`
}

// TODO: split by lines
// This object represents the content of a media message to be sent. It should be one of
type InputMedia struct {
	// caption:Optional. Caption of the photo to be sent, 0-1024 characters after entities parsing
	// media:File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass "attach://<file_attach_name>" to upload a new one using multipart/form-data under <file_attach_name> name. 
	// Media string
	Media string `json:"media"`
	// parse_mode:Optional. Mode for parsing entities in the photo caption. See formatting options for more details.
	// type:Type of the result, must be photo
	// Type string
	Type string `json:"type"`
}

// TODO: split by lines
// Represents an animation file (GIF or H.264/MPEG-4 AVC video without sound) to be sent.
type InputMediaAnimation struct {
	// caption:Optional. Caption of the animation to be sent, 0-1024 characters after entities parsing
	// duration:Optional. Animation duration
	// height:Optional. Animation height
	// media:File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass "attach://<file_attach_name>" to upload a new one using multipart/form-data under <file_attach_name> name. 
	// Media string
	Media string `json:"media"`
	// parse_mode:Optional. Mode for parsing entities in the animation caption. See formatting options for more details.
	// thumb:Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass "attach://<file_attach_name>" if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. 
	// type:Type of the result, must be animation
	// Type string
	Type string `json:"type"`
	// width:Optional. Animation width
}

// TODO: split by lines
// Represents an audio file to be treated as music to be sent.
type InputMediaAudio struct {
	// caption:Optional. Caption of the audio to be sent, 0-1024 characters after entities parsing
	// duration:Optional. Duration of the audio in seconds
	// media:File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass "attach://<file_attach_name>" to upload a new one using multipart/form-data under <file_attach_name> name. 
	// Media string
	Media string `json:"media"`
	// parse_mode:Optional. Mode for parsing entities in the audio caption. See formatting options for more details.
	// performer:Optional. Performer of the audio
	// thumb:Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass "attach://<file_attach_name>" if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. 
	// title:Optional. Title of the audio
	// type:Type of the result, must be audio
	// Type string
	Type string `json:"type"`
}

// TODO: split by lines
// Represents a general file to be sent.
type InputMediaDocument struct {
	// caption:Optional. Caption of the document to be sent, 0-1024 characters after entities parsing
	// media:File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass "attach://<file_attach_name>" to upload a new one using multipart/form-data under <file_attach_name> name. 
	// Media string
	Media string `json:"media"`
	// parse_mode:Optional. Mode for parsing entities in the document caption. See formatting options for more details.
	// thumb:Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass "attach://<file_attach_name>" if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. 
	// type:Type of the result, must be document
	// Type string
	Type string `json:"type"`
}

// TODO: split by lines
// Represents a photo to be sent.
type InputMediaPhoto struct {
	// caption:Optional. Caption of the photo to be sent, 0-1024 characters after entities parsing
	// media:File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass "attach://<file_attach_name>" to upload a new one using multipart/form-data under <file_attach_name> name. 
	// Media string
	Media string `json:"media"`
	// parse_mode:Optional. Mode for parsing entities in the photo caption. See formatting options for more details.
	// type:Type of the result, must be photo
	// Type string
	Type string `json:"type"`
}

// TODO: split by lines
// Represents a video to be sent.
type InputMediaVideo struct {
	// caption:Optional. Caption of the video to be sent, 0-1024 characters after entities parsing
	// duration:Optional. Video duration
	// height:Optional. Video height
	// media:File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass "attach://<file_attach_name>" to upload a new one using multipart/form-data under <file_attach_name> name. 
	// Media string
	Media string `json:"media"`
	// parse_mode:Optional. Mode for parsing entities in the video caption. See formatting options for more details.
	// supports_streaming:Optional. Pass True, if the uploaded video is suitable for streaming
	// thumb:Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass "attach://<file_attach_name>" if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. 
	// type:Type of the result, must be video
	// Type string
	Type string `json:"type"`
	// width:Optional. Video width
}

// TODO: split by lines
// This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types:
type InputMessageContent struct {
	// disable_web_page_preview:Optional. Disables link previews for links in the sent message
	// message_text:Text of the message to be sent, 1-4096 characters
	// MessageText string
	MessageText string `json:"message_text"`
	// parse_mode:Optional. Mode for parsing entities in the message text. See formatting options for more details.
}

// TODO: split by lines
// Represents the content of a text message to be sent as the result of an inline query.
type InputTextMessageContent struct {
	// disable_web_page_preview:Optional. Disables link previews for links in the sent message
	// message_text:Text of the message to be sent, 1-4096 characters
	// MessageText string
	MessageText string `json:"message_text"`
	// parse_mode:Optional. Mode for parsing entities in the message text. See formatting options for more details.
}

// TODO: split by lines
// Represents the content of a venue message to be sent as the result of an inline query.
type InputVenueMessageContent struct {
	// address:Address of the venue
	// Address string
	Address string `json:"address"`
	// foursquare_id:Optional. Foursquare identifier of the venue, if known
	// foursquare_type:Optional. Foursquare type of the venue, if known. (For example, "arts_entertainment/default", "arts_entertainment/aquarium" or "food/icecream".)
	// latitude:Latitude of the venue in degrees
	// Latitude float64
	Latitude float64 `json:"latitude"`
	// longitude:Longitude of the venue in degrees
	// Longitude float64
	Longitude float64 `json:"longitude"`
	// title:Name of the venue
	// Title string
	Title string `json:"title"`
}

// TODO: split by lines
// This object contains basic information about an invoice.
type Invoice struct {
	// currency:Three-letter ISO 4217 currency code
	// Currency string
	Currency string `json:"currency"`
	// description:Product description
	// Description string
	Description string `json:"description"`
	// start_parameter:Unique bot deep-linking parameter that can be used to generate this invoice
	// StartParameter string
	StartParameter string `json:"start_parameter"`
	// title:Product name
	// Title string
	Title string `json:"title"`
	// total_amount:Total price in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
	// TotalAmount int64
	TotalAmount int64 `json:"total_amount"`
}

// TODO: split by lines
// This object represents one button of the reply keyboard. For simple text buttons String can be used instead of this object to specify text of the button. Optional fields request_contact, request_location, and request_poll are mutually exclusive.
type KeyboardButton struct {
	// request_contact:Optional. If True, the user's phone number will be sent as a contact when the button is pressed. Available in private chats only
	// request_location:Optional. If True, the user's current location will be sent when the button is pressed. Available in private chats only
	// request_poll:Optional. If specified, the user will be asked to create a poll and send it to the bot when the button is pressed. Available in private chats only
	// text:Text of the button. If none of the optional fields are used, it will be sent as a message when the button is pressed
	// Text string
	Text string `json:"text"`
}

// TODO: split by lines
// This object represents type of a poll, which is allowed to be created and sent when the corresponding button is pressed.
type KeyboardButtonPollType struct {
	// type:Optional. If quiz is passed, the user will be allowed to create only polls in the quiz mode. If regular is passed, only regular polls will be allowed. Otherwise, the user will be allowed to create a poll of any type.
}

// TODO: split by lines
// This object represents a portion of the price for goods or services.
type LabeledPrice struct {
	// amount:Price of the product in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
	// Amount int64
	Amount int64 `json:"amount"`
	// label:Portion label
	// Label string
	Label string `json:"label"`
}

// TODO: split by lines
// This object represents a point on the map.
type Location struct {
	// latitude:Latitude as defined by sender
	// Latitude float64
	Latitude float64 `json:"latitude"`
	// longitude:Longitude as defined by sender
	// Longitude float64
	Longitude float64 `json:"longitude"`
}

// TODO: split by lines
// This object represents a parameter of the inline keyboard button used to automatically authorize a user. Serves as a great replacement for the Telegram Login Widget when the user is coming from Telegram. All the user needs to do is tap/click a button and confirm that they want to log in:
type LoginUrl struct {
	// bot_username:Optional. Username of a bot, which will be used for user authorization. See Setting up a bot for more details. If not specified, the current bot's username will be assumed. The url's domain must be the same as the domain linked with the bot. See Linking your domain to the bot for more details.
	// forward_text:Optional. New text of the button in forwarded messages.
	// request_write_access:Optional. Pass True to request the permission for your bot to send messages to the user.
	// url:An HTTP URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in Receiving authorization data.NOTE: You must always check the hash of the received data to verify the authentication and the integrity of the data as described in Checking authorization.
	// Url string
	Url string `json:"url"`
}

// TODO: split by lines
// This object describes the position on faces where a mask should be placed by default.
type MaskPosition struct {
	// point:The part of the face relative to which the mask should be placed. One of "forehead", "eyes", "mouth", or "chin".
	// Point string
	Point string `json:"point"`
	// scale:Mask scaling coefficient. For example, 2.0 means double size.
	// Scale float64
	Scale float64 `json:"scale"`
	// x_shift:Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. For example, choosing -1.0 will place mask just to the left of the default mask position.
	// XShift float64
	XShift float64 `json:"x_shift"`
	// y_shift:Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom. For example, 1.0 will place the mask just below the default mask position.
	// YShift float64
	YShift float64 `json:"y_shift"`
}

// TODO: split by lines
// This object represents a message.
type Message struct {
	// animation:Optional. Message is an animation, information about the animation. For backward compatibility, when this field is set, the document field will also be set
	// audio:Optional. Message is an audio file, information about the file
	// author_signature:Optional. Signature of the post author for messages in channels
	// caption:Optional. Caption for the animation, audio, document, photo, video or voice, 0-1024 characters
	// caption_entities:Optional. For messages with a caption, special entities like usernames, URLs, bot commands, etc. that appear in the caption
	// channel_chat_created:Optional. Service message: the channel has been created. This field can't be received in a message coming through updates, because bot can't be a member of a channel when it is created. It can only be found in reply_to_message if someone replies to a very first message in a channel.
	// chat:Conversation the message belongs to
	// Chat Chat
	Chat Chat `json:"chat"`
	// connected_website:Optional. The domain name of the website on which the user has logged in. More about Telegram Login »
	// contact:Optional. Message is a shared contact, information about the contact
	// date:Date the message was sent in Unix time
	// Date int64
	Date int64 `json:"date"`
	// delete_chat_photo:Optional. Service message: the chat photo was deleted
	// dice:Optional. Message is a dice with random value from 1 to 6
	// document:Optional. Message is a general file, information about the file
	// edit_date:Optional. Date the message was last edited in Unix time
	// entities:Optional. For text messages, special entities like usernames, URLs, bot commands, etc. that appear in the text
	// forward_date:Optional. For forwarded messages, date the original message was sent in Unix time
	// forward_from:Optional. For forwarded messages, sender of the original message
	// forward_from_chat:Optional. For messages forwarded from channels, information about the original channel
	// forward_from_message_id:Optional. For messages forwarded from channels, identifier of the original message in the channel
	// forward_sender_name:Optional. Sender's name for messages forwarded from users who disallow adding a link to their account in forwarded messages
	// forward_signature:Optional. For messages forwarded from channels, signature of the post author if present
	// from:Optional. Sender, empty for messages sent to channels
	// game:Optional. Message is a game, information about the game. More about games »
	// group_chat_created:Optional. Service message: the group has been created
	// invoice:Optional. Message is an invoice for a payment, information about the invoice. More about payments »
	// left_chat_member:Optional. A member was removed from the group, information about them (this member may be the bot itself)
	// location:Optional. Message is a shared location, information about the location
	// media_group_id:Optional. The unique identifier of a media message group this message belongs to
	// message_id:Unique message identifier inside this chat
	// MessageId int64
	MessageId int64 `json:"message_id"`
	// migrate_from_chat_id:Optional. The supergroup has been migrated from a group with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
	// migrate_to_chat_id:Optional. The group has been migrated to a supergroup with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
	// new_chat_members:Optional. New members that were added to the group or supergroup and information about them (the bot itself may be one of these members)
	// new_chat_photo:Optional. A chat photo was change to this value
	// new_chat_title:Optional. A chat title was changed to this value
	// passport_data:Optional. Telegram Passport data
	// photo:Optional. Message is a photo, available sizes of the photo
	// pinned_message:Optional. Specified message was pinned. Note that the Message object in this field will not contain further reply_to_message fields even if it is itself a reply.
	// poll:Optional. Message is a native poll, information about the poll
	// reply_markup:Optional. Inline keyboard attached to the message. login_url buttons are represented as ordinary url buttons.
	// reply_to_message:Optional. For replies, the original message. Note that the Message object in this field will not contain further reply_to_message fields even if it itself is a reply.
	// sticker:Optional. Message is a sticker, information about the sticker
	// successful_payment:Optional. Message is a service message about a successful payment, information about the payment. More about payments »
	// supergroup_chat_created:Optional. Service message: the supergroup has been created. This field can't be received in a message coming through updates, because bot can't be a member of a supergroup when it is created. It can only be found in reply_to_message if someone replies to a very first message in a directly created supergroup.
	// text:Optional. For text messages, the actual UTF-8 text of the message, 0-4096 characters
	// venue:Optional. Message is a venue, information about the venue. For backward compatibility, when this field is set, the location field will also be set
	// via_bot:Optional. Bot through which the message was sent
	// video:Optional. Message is a video, information about the video
	// video_note:Optional. Message is a video note, information about the video message
	// voice:Optional. Message is a voice message, information about the file
}

// TODO: split by lines
// This object represents one special entity in a text message. For example, hashtags, usernames, URLs, etc.
type MessageEntity struct {
	// language:Optional. For "pre" only, the programming language of the entity text
	// length:Length of the entity in UTF-16 code units
	// Length int64
	Length int64 `json:"length"`
	// offset:Offset in UTF-16 code units to the start of the entity
	// Offset int64
	Offset int64 `json:"offset"`
	// type:Type of the entity. Can be "mention" (@username), "hashtag" (#hashtag), "cashtag" ($USD), "bot_command" (/start@jobs_bot), "url" (https://telegram.org), "email" (do-not-reply@telegram.org), "phone_number" (+1-212-555-0123), "bold" (bold text), "italic" (italic text), "underline" (underlined text), "strikethrough" (strikethrough text), "code" (monowidth string), "pre" (monowidth block), "text_link" (for clickable text URLs), "text_mention" (for users without usernames)
	// Type string
	Type string `json:"type"`
	// url:Optional. For "text_link" only, url that will be opened after user taps on the text
	// user:Optional. For "text_mention" only, the mentioned user
}

// TODO: split by lines
// This object represents information about an order.
type OrderInfo struct {
	// email:Optional. User email
	// name:Optional. User name
	// phone_number:Optional. User's phone number
	// shipping_address:Optional. User shipping address
}

// TODO: split by lines
// Contains information about Telegram Passport data shared with the bot by the user.
type PassportData struct {
	// credentials:Encrypted credentials required to decrypt the data
	// Credentials EncryptedCredentials
	Credentials EncryptedCredentials `json:"credentials"`
	// data:Array with information about documents and other Telegram Passport elements that was shared with the bot
	// Data []EncryptedPassportElement
	Data []EncryptedPassportElement `json:"data"`
}

// TODO: split by lines
// This object represents an error in the Telegram Passport element which was submitted that should be resolved by the user. It should be one of:
type PassportElementError struct {
	// data_hash:Base64-encoded data hash
	// DataHash string
	DataHash string `json:"data_hash"`
	// field_name:Name of the data field which has the error
	// FieldName string
	FieldName string `json:"field_name"`
	// message:Error message
	// Message string
	Message string `json:"message"`
	// source:Error source, must be data
	// Source string
	Source string `json:"source"`
	// type:The section of the user's Telegram Passport which has the error, one of "personal_details", "passport", "driver_license", "identity_card", "internal_passport", "address"
	// Type string
	Type string `json:"type"`
}

// TODO: split by lines
// Represents an issue in one of the data fields that was provided by the user. The error is considered resolved when the field's value changes.
type PassportElementErrorDataField struct {
	// data_hash:Base64-encoded data hash
	// DataHash string
	DataHash string `json:"data_hash"`
	// field_name:Name of the data field which has the error
	// FieldName string
	FieldName string `json:"field_name"`
	// message:Error message
	// Message string
	Message string `json:"message"`
	// source:Error source, must be data
	// Source string
	Source string `json:"source"`
	// type:The section of the user's Telegram Passport which has the error, one of "personal_details", "passport", "driver_license", "identity_card", "internal_passport", "address"
	// Type string
	Type string `json:"type"`
}

// TODO: split by lines
// Represents an issue with a document scan. The error is considered resolved when the file with the document scan changes.
type PassportElementErrorFile struct {
	// file_hash:Base64-encoded file hash
	// FileHash string
	FileHash string `json:"file_hash"`
	// message:Error message
	// Message string
	Message string `json:"message"`
	// source:Error source, must be file
	// Source string
	Source string `json:"source"`
	// type:The section of the user's Telegram Passport which has the issue, one of "utility_bill", "bank_statement", "rental_agreement", "passport_registration", "temporary_registration"
	// Type string
	Type string `json:"type"`
}

// TODO: split by lines
// Represents an issue with a list of scans. The error is considered resolved when the list of files containing the scans changes.
type PassportElementErrorFiles struct {
	// file_hashes:List of base64-encoded file hashes
	// FileHashes []string
	FileHashes []string `json:"file_hashes"`
	// message:Error message
	// Message string
	Message string `json:"message"`
	// source:Error source, must be files
	// Source string
	Source string `json:"source"`
	// type:The section of the user's Telegram Passport which has the issue, one of "utility_bill", "bank_statement", "rental_agreement", "passport_registration", "temporary_registration"
	// Type string
	Type string `json:"type"`
}

// TODO: split by lines
// Represents an issue with the front side of a document. The error is considered resolved when the file with the front side of the document changes.
type PassportElementErrorFrontSide struct {
	// file_hash:Base64-encoded hash of the file with the front side of the document
	// FileHash string
	FileHash string `json:"file_hash"`
	// message:Error message
	// Message string
	Message string `json:"message"`
	// source:Error source, must be front_side
	// Source string
	Source string `json:"source"`
	// type:The section of the user's Telegram Passport which has the issue, one of "passport", "driver_license", "identity_card", "internal_passport"
	// Type string
	Type string `json:"type"`
}

// TODO: split by lines
// Represents an issue with the reverse side of a document. The error is considered resolved when the file with reverse side of the document changes.
type PassportElementErrorReverseSide struct {
	// file_hash:Base64-encoded hash of the file with the reverse side of the document
	// FileHash string
	FileHash string `json:"file_hash"`
	// message:Error message
	// Message string
	Message string `json:"message"`
	// source:Error source, must be reverse_side
	// Source string
	Source string `json:"source"`
	// type:The section of the user's Telegram Passport which has the issue, one of "driver_license", "identity_card"
	// Type string
	Type string `json:"type"`
}

// TODO: split by lines
// Represents an issue with the selfie with a document. The error is considered resolved when the file with the selfie changes.
type PassportElementErrorSelfie struct {
	// file_hash:Base64-encoded hash of the file with the selfie
	// FileHash string
	FileHash string `json:"file_hash"`
	// message:Error message
	// Message string
	Message string `json:"message"`
	// source:Error source, must be selfie
	// Source string
	Source string `json:"source"`
	// type:The section of the user's Telegram Passport which has the issue, one of "passport", "driver_license", "identity_card", "internal_passport"
	// Type string
	Type string `json:"type"`
}

// TODO: split by lines
// Represents an issue with one of the files that constitute the translation of a document. The error is considered resolved when the file changes.
type PassportElementErrorTranslationFile struct {
	// file_hash:Base64-encoded file hash
	// FileHash string
	FileHash string `json:"file_hash"`
	// message:Error message
	// Message string
	Message string `json:"message"`
	// source:Error source, must be translation_file
	// Source string
	Source string `json:"source"`
	// type:Type of element of the user's Telegram Passport which has the issue, one of "passport", "driver_license", "identity_card", "internal_passport", "utility_bill", "bank_statement", "rental_agreement", "passport_registration", "temporary_registration"
	// Type string
	Type string `json:"type"`
}

// TODO: split by lines
// Represents an issue with the translated version of a document. The error is considered resolved when a file with the document translation change.
type PassportElementErrorTranslationFiles struct {
	// file_hashes:List of base64-encoded file hashes
	// FileHashes []string
	FileHashes []string `json:"file_hashes"`
	// message:Error message
	// Message string
	Message string `json:"message"`
	// source:Error source, must be translation_files
	// Source string
	Source string `json:"source"`
	// type:Type of element of the user's Telegram Passport which has the issue, one of "passport", "driver_license", "identity_card", "internal_passport", "utility_bill", "bank_statement", "rental_agreement", "passport_registration", "temporary_registration"
	// Type string
	Type string `json:"type"`
}

// TODO: split by lines
// Represents an issue in an unspecified place. The error is considered resolved when new data is added.
type PassportElementErrorUnspecified struct {
	// element_hash:Base64-encoded element hash
	// ElementHash string
	ElementHash string `json:"element_hash"`
	// message:Error message
	// Message string
	Message string `json:"message"`
	// source:Error source, must be unspecified
	// Source string
	Source string `json:"source"`
	// type:Type of element of the user's Telegram Passport which has the issue
	// Type string
	Type string `json:"type"`
}

// TODO: split by lines
// This object represents a file uploaded to Telegram Passport. Currently all Telegram Passport files are in JPEG format when decrypted and don't exceed 10MB.
type PassportFile struct {
	// file_date:Unix time when the file was uploaded
	// FileDate int64
	FileDate int64 `json:"file_date"`
	// file_id:Identifier for this file, which can be used to download or reuse the file
	// FileId string
	FileId string `json:"file_id"`
	// file_size:File size
	// FileSize int64
	FileSize int64 `json:"file_size"`
	// file_unique_id:Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
	// FileUniqueId string
	FileUniqueId string `json:"file_unique_id"`
}

// TODO: split by lines
// Your bot can accept payments from Telegram users. Please see the introduction to payments for more details on the process and how to set up payments for your bot. Please note that users will need Telegram v.4.0 or higher to use payments (released on May 18, 2017).
type Payments struct {
	// chat_id:Unique identifier for the target private chat
	// ChatId int64
	ChatId int64 `json:"chat_id"`
	// currency:Three-letter ISO 4217 currency code, see more on currencies
	// Currency string
	Currency string `json:"currency"`
	// description:Product description, 1-255 characters
	// Description string
	Description string `json:"description"`
	// disable_notification:Sends the message silently. Users will receive a notification with no sound.
	// is_flexible:Pass True, if the final price depends on the shipping method
	// need_email:Pass True, if you require the user's email address to complete the order
	// need_name:Pass True, if you require the user's full name to complete the order
	// need_phone_number:Pass True, if you require the user's phone number to complete the order
	// need_shipping_address:Pass True, if you require the user's shipping address to complete the order
	// payload:Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.
	// Payload string
	Payload string `json:"payload"`
	// photo_height:Photo height
	// photo_size:Photo size
	// photo_url:URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.
	// photo_width:Photo width
	// prices:Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)
	// Prices []LabeledPrice
	Prices []LabeledPrice `json:"prices"`
	// provider_data:A JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.
	// provider_token:Payments provider token, obtained via Botfather
	// ProviderToken string
	ProviderToken string `json:"provider_token"`
	// reply_markup:A JSON-serialized object for an inline keyboard. If empty, one 'Pay total price' button will be shown. If not empty, the first button must be a Pay button.
	// reply_to_message_id:If the message is a reply, ID of the original message
	// send_email_to_provider:Pass True, if user's email address should be sent to provider
	// send_phone_number_to_provider:Pass True, if user's phone number should be sent to provider
	// start_parameter:Unique deep-linking parameter that can be used to generate this invoice when used as a start parameter
	// StartParameter string
	StartParameter string `json:"start_parameter"`
	// title:Product name, 1-32 characters
	// Title string
	Title string `json:"title"`
}

// TODO: split by lines
// This object represents one size of a photo or a file / sticker thumbnail.
type PhotoSize struct {
	// file_id:Identifier for this file, which can be used to download or reuse the file
	// FileId string
	FileId string `json:"file_id"`
	// file_size:Optional. File size
	// file_unique_id:Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
	// FileUniqueId string
	FileUniqueId string `json:"file_unique_id"`
	// height:Photo height
	// Height int64
	Height int64 `json:"height"`
	// width:Photo width
	// Width int64
	Width int64 `json:"width"`
}

// TODO: split by lines
// This object contains information about a poll.
type Poll struct {
	// allows_multiple_answers:True, if the poll allows multiple answers
	// AllowsMultipleAnswers bool
	AllowsMultipleAnswers bool `json:"allows_multiple_answers"`
	// close_date:Optional. Point in time (Unix timestamp) when the poll will be automatically closed
	// correct_option_id:Optional. 0-based identifier of the correct answer option. Available only for polls in the quiz mode, which are closed, or was sent (not forwarded) by the bot or to the private chat with the bot.
	// explanation:Optional. Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters
	// explanation_entities:Optional. Special entities like usernames, URLs, bot commands, etc. that appear in the explanation
	// id:Unique poll identifier
	// Id string
	Id string `json:"id"`
	// is_anonymous:True, if the poll is anonymous
	// IsAnonymous bool
	IsAnonymous bool `json:"is_anonymous"`
	// is_closed:True, if the poll is closed
	// IsClosed bool
	IsClosed bool `json:"is_closed"`
	// open_period:Optional. Amount of time in seconds the poll will be active after creation
	// options:List of poll options
	// Options []PollOption
	Options []PollOption `json:"options"`
	// question:Poll question, 1-255 characters
	// Question string
	Question string `json:"question"`
	// total_voter_count:Total number of users that voted in the poll
	// TotalVoterCount int64
	TotalVoterCount int64 `json:"total_voter_count"`
	// type:Poll type, currently can be "regular" or "quiz"
	// Type string
	Type string `json:"type"`
}

// TODO: split by lines
// This object represents an answer of a user in a non-anonymous poll.
type PollAnswer struct {
	// option_ids:0-based identifiers of answer options, chosen by the user. May be empty if the user retracted their vote.
	// OptionIds []int64
	OptionIds []int64 `json:"option_ids"`
	// poll_id:Unique poll identifier
	// PollId string
	PollId string `json:"poll_id"`
	// user:The user, who changed the answer to the poll
	// User User
	User User `json:"user"`
}

// TODO: split by lines
// This object contains information about one answer option in a poll.
type PollOption struct {
	// text:Option text, 1-100 characters
	// Text string
	Text string `json:"text"`
	// voter_count:Number of users that voted for this option
	// VoterCount int64
	VoterCount int64 `json:"voter_count"`
}

// TODO: split by lines
// This object contains information about an incoming pre-checkout query.
type PreCheckoutQuery struct {
	// currency:Three-letter ISO 4217 currency code
	// Currency string
	Currency string `json:"currency"`
	// from:User who sent the query
	// From User
	From User `json:"from"`
	// id:Unique query identifier
	// Id string
	Id string `json:"id"`
	// invoice_payload:Bot specified invoice payload
	// InvoicePayload string
	InvoicePayload string `json:"invoice_payload"`
	// order_info:Optional. Order info provided by the user
	// shipping_option_id:Optional. Identifier of the shipping option chosen by the user
	// total_amount:Total price in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
	// TotalAmount int64
	TotalAmount int64 `json:"total_amount"`
}

// TODO: split by lines
// This object represents a custom keyboard with reply options (see Introduction to bots for details and examples).
type ReplyKeyboardMarkup struct {
	// keyboard:Array of button rows, each represented by an Array of KeyboardButton objects
	// Keyboard [][]KeyboardButton
	Keyboard [][]KeyboardButton `json:"keyboard"`
	// one_time_keyboard:Optional. Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat - the user can press a special button in the input field to see the custom keyboard again. Defaults to false.
	// resize_keyboard:Optional. Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). Defaults to false, in which case the custom keyboard is always of the same height as the app's standard keyboard.
	// selective:Optional. Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has reply_to_message_id), sender of the original message.Example: A user requests to change the bot's language, bot replies to the request with a keyboard to select the new language. Other users in the group don't see the keyboard.
}

// TODO: split by lines
// Upon receiving a message with this object, Telegram clients will remove the current custom keyboard and display the default letter-keyboard. By default, custom keyboards are displayed until a new keyboard is sent by a bot. An exception is made for one-time keyboards that are hidden immediately after the user presses a button (see ReplyKeyboardMarkup).
type ReplyKeyboardRemove struct {
	// remove_keyboard:Requests clients to remove the custom keyboard (user will not be able to summon this keyboard; if you want to hide the keyboard from sight but keep it accessible, use one_time_keyboard in ReplyKeyboardMarkup)
	// RemoveKeyboard bool
	RemoveKeyboard bool `json:"remove_keyboard"`
	// selective:Optional. Use this parameter if you want to remove the keyboard for specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has reply_to_message_id), sender of the original message.Example: A user votes in a poll, bot returns confirmation message in reply to the vote and removes the keyboard for that user, while still showing the keyboard with poll options to users who haven't voted yet.
}

// TODO: split by lines
// Contains information about why a request was unsuccessful.
type ResponseParameters struct {
	// migrate_to_chat_id:Optional. The group has been migrated to a supergroup with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
	// retry_after:Optional. In case of exceeding flood control, the number of seconds left to wait before the request can be repeated
}

// TODO: split by lines
// This object represents a shipping address.
type ShippingAddress struct {
	// city:City
	// City string
	City string `json:"city"`
	// country_code:ISO 3166-1 alpha-2 country code
	// CountryCode string
	CountryCode string `json:"country_code"`
	// post_code:Address post code
	// PostCode string
	PostCode string `json:"post_code"`
	// state:State, if applicable
	// State string
	State string `json:"state"`
	// street_line1:First line for the address
	// StreetLine1 string
	StreetLine1 string `json:"street_line1"`
	// street_line2:Second line for the address
	// StreetLine2 string
	StreetLine2 string `json:"street_line2"`
}

// TODO: split by lines
// This object represents one shipping option.
type ShippingOption struct {
	// id:Shipping option identifier
	// Id string
	Id string `json:"id"`
	// prices:List of price portions
	// Prices []LabeledPrice
	Prices []LabeledPrice `json:"prices"`
	// title:Option title
	// Title string
	Title string `json:"title"`
}

// TODO: split by lines
// This object contains information about an incoming shipping query.
type ShippingQuery struct {
	// from:User who sent the query
	// From User
	From User `json:"from"`
	// id:Unique query identifier
	// Id string
	Id string `json:"id"`
	// invoice_payload:Bot specified invoice payload
	// InvoicePayload string
	InvoicePayload string `json:"invoice_payload"`
	// shipping_address:User specified shipping address
	// ShippingAddress ShippingAddress
	ShippingAddress ShippingAddress `json:"shipping_address"`
}

// TODO: split by lines
// This object represents a sticker.
type Sticker struct {
	// emoji:Optional. Emoji associated with the sticker
	// file_id:Identifier for this file, which can be used to download or reuse the file
	// FileId string
	FileId string `json:"file_id"`
	// file_size:Optional. File size
	// file_unique_id:Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
	// FileUniqueId string
	FileUniqueId string `json:"file_unique_id"`
	// height:Sticker height
	// Height int64
	Height int64 `json:"height"`
	// is_animated:True, if the sticker is animated
	// IsAnimated bool
	IsAnimated bool `json:"is_animated"`
	// mask_position:Optional. For mask stickers, the position where the mask should be placed
	// set_name:Optional. Name of the sticker set to which the sticker belongs
	// thumb:Optional. Sticker thumbnail in the .WEBP or .JPG format
	// width:Sticker width
	// Width int64
	Width int64 `json:"width"`
}

// TODO: split by lines
// This object represents a sticker set.
type StickerSet struct {
	// contains_masks:True, if the sticker set contains masks
	// ContainsMasks bool
	ContainsMasks bool `json:"contains_masks"`
	// is_animated:True, if the sticker set contains animated stickers
	// IsAnimated bool
	IsAnimated bool `json:"is_animated"`
	// name:Sticker set name
	// Name string
	Name string `json:"name"`
	// stickers:List of all set stickers
	// Stickers []Sticker
	Stickers []Sticker `json:"stickers"`
	// thumb:Optional. Sticker set thumbnail in the .WEBP or .TGS format
	// title:Sticker set title
	// Title string
	Title string `json:"title"`
}

// TODO: split by lines
// The following methods and objects allow your bot to handle stickers and sticker sets.
type Stickers struct {
	// emoji:Optional. Emoji associated with the sticker
	// file_id:Identifier for this file, which can be used to download or reuse the file
	// FileId string
	FileId string `json:"file_id"`
	// file_size:Optional. File size
	// file_unique_id:Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
	// FileUniqueId string
	FileUniqueId string `json:"file_unique_id"`
	// height:Sticker height
	// Height int64
	Height int64 `json:"height"`
	// is_animated:True, if the sticker is animated
	// IsAnimated bool
	IsAnimated bool `json:"is_animated"`
	// mask_position:Optional. For mask stickers, the position where the mask should be placed
	// set_name:Optional. Name of the sticker set to which the sticker belongs
	// thumb:Optional. Sticker thumbnail in the .WEBP or .JPG format
	// width:Sticker width
	// Width int64
	Width int64 `json:"width"`
}

// TODO: split by lines
// This object contains basic information about a successful payment.
type SuccessfulPayment struct {
	// currency:Three-letter ISO 4217 currency code
	// Currency string
	Currency string `json:"currency"`
	// invoice_payload:Bot specified invoice payload
	// InvoicePayload string
	InvoicePayload string `json:"invoice_payload"`
	// order_info:Optional. Order info provided by the user
	// provider_payment_charge_id:Provider payment identifier
	// ProviderPaymentChargeId string
	ProviderPaymentChargeId string `json:"provider_payment_charge_id"`
	// shipping_option_id:Optional. Identifier of the shipping option chosen by the user
	// telegram_payment_charge_id:Telegram payment identifier
	// TelegramPaymentChargeId string
	TelegramPaymentChargeId string `json:"telegram_payment_charge_id"`
	// total_amount:Total price in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
	// TotalAmount int64
	TotalAmount int64 `json:"total_amount"`
}

// TODO: split by lines
// This object represents an incoming update.At most one of the optional parameters can be present in any given update.
type Update struct {
	// callback_query:Optional. New incoming callback query
	// channel_post:Optional. New incoming channel post of any kind - text, photo, sticker, etc.
	// chosen_inline_result:Optional. The result of an inline query that was chosen by a user and sent to their chat partner. Please see our documentation on the feedback collecting for details on how to enable these updates for your bot.
	// edited_channel_post:Optional. New version of a channel post that is known to the bot and was edited
	// edited_message:Optional. New version of a message that is known to the bot and was edited
	// inline_query:Optional. New incoming inline query
	// message:Optional. New incoming message of any kind - text, photo, sticker, etc.
	// poll:Optional. New poll state. Bots receive only updates about stopped polls and polls, which are sent by the bot
	// poll_answer:Optional. A user changed their answer in a non-anonymous poll. Bots receive new votes only in polls that were sent by the bot itself.
	// pre_checkout_query:Optional. New incoming pre-checkout query. Contains full information about checkout
	// shipping_query:Optional. New incoming shipping query. Only for invoices with flexible price
	// update_id:The update's unique identifier. Update identifiers start from a certain positive number and increase sequentially. This ID becomes especially handy if you're using Webhooks, since it allows you to ignore repeated updates or to restore the correct update sequence, should they get out of order. If there are no new updates for at least a week, then identifier of the next update will be chosen randomly instead of sequentially.
	// UpdateId int64
	UpdateId int64 `json:"update_id"`
}

// TODO: split by lines
// This object represents a Telegram user or bot.
type User struct {
	// can_join_groups:Optional. True, if the bot can be invited to groups. Returned only in getMe.
	// can_read_all_group_messages:Optional. True, if privacy mode is disabled for the bot. Returned only in getMe.
	// first_name:User's or bot's first name
	// FirstName string
	FirstName string `json:"first_name"`
	// id:Unique identifier for this user or bot
	// Id int64
	Id int64 `json:"id"`
	// is_bot:True, if this user is a bot
	// IsBot bool
	IsBot bool `json:"is_bot"`
	// language_code:Optional. IETF language tag of the user's language
	// last_name:Optional. User's or bot's last name
	// supports_inline_queries:Optional. True, if the bot supports inline queries. Returned only in getMe.
	// username:Optional. User's or bot's username
}

// TODO: split by lines
// This object represent a user's profile pictures.
type UserProfilePhotos struct {
	// photos:Requested profile pictures (in up to 4 sizes each)
	// Photos [][]PhotoSize
	Photos [][]PhotoSize `json:"photos"`
	// total_count:Total number of profile pictures the target user has
	// TotalCount int64
	TotalCount int64 `json:"total_count"`
}

// TODO: split by lines
// This object represents a venue.
type Venue struct {
	// address:Address of the venue
	// Address string
	Address string `json:"address"`
	// foursquare_id:Optional. Foursquare identifier of the venue
	// foursquare_type:Optional. Foursquare type of the venue. (For example, "arts_entertainment/default", "arts_entertainment/aquarium" or "food/icecream".)
	// location:Venue location
	// Location Location
	Location Location `json:"location"`
	// title:Name of the venue
	// Title string
	Title string `json:"title"`
}

// TODO: split by lines
// This object represents a video file.
type Video struct {
	// duration:Duration of the video in seconds as defined by sender
	// Duration int64
	Duration int64 `json:"duration"`
	// file_id:Identifier for this file, which can be used to download or reuse the file
	// FileId string
	FileId string `json:"file_id"`
	// file_size:Optional. File size
	// file_unique_id:Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
	// FileUniqueId string
	FileUniqueId string `json:"file_unique_id"`
	// height:Video height as defined by sender
	// Height int64
	Height int64 `json:"height"`
	// mime_type:Optional. Mime type of a file as defined by sender
	// thumb:Optional. Video thumbnail
	// width:Video width as defined by sender
	// Width int64
	Width int64 `json:"width"`
}

// TODO: split by lines
// This object represents a video message (available in Telegram apps as of v.4.0).
type VideoNote struct {
	// duration:Duration of the video in seconds as defined by sender
	// Duration int64
	Duration int64 `json:"duration"`
	// file_id:Identifier for this file, which can be used to download or reuse the file
	// FileId string
	FileId string `json:"file_id"`
	// file_size:Optional. File size
	// file_unique_id:Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
	// FileUniqueId string
	FileUniqueId string `json:"file_unique_id"`
	// length:Video width and height (diameter of the video message) as defined by sender
	// Length int64
	Length int64 `json:"length"`
	// thumb:Optional. Video thumbnail
}

// TODO: split by lines
// This object represents a voice note.
type Voice struct {
	// duration:Duration of the audio in seconds as defined by sender
	// Duration int64
	Duration int64 `json:"duration"`
	// file_id:Identifier for this file, which can be used to download or reuse the file
	// FileId string
	FileId string `json:"file_id"`
	// file_size:Optional. File size
	// file_unique_id:Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
	// FileUniqueId string
	FileUniqueId string `json:"file_unique_id"`
	// mime_type:Optional. MIME type of the file as defined by sender
}

// TODO: split by lines
// Contains information about the current status of a webhook.
type WebhookInfo struct {
	// allowed_updates:Optional. A list of update types the bot is subscribed to. Defaults to all update types
	// has_custom_certificate:True, if a custom certificate was provided for webhook certificate checks
	// HasCustomCertificate bool
	HasCustomCertificate bool `json:"has_custom_certificate"`
	// last_error_date:Optional. Unix time for the most recent error that happened when trying to deliver an update via webhook
	// last_error_message:Optional. Error message in human-readable format for the most recent error that happened when trying to deliver an update via webhook
	// max_connections:Optional. Maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery
	// pending_update_count:Number of updates awaiting delivery
	// PendingUpdateCount int64
	PendingUpdateCount int64 `json:"pending_update_count"`
	// url:Webhook URL, may be empty if webhook is not set up
	// Url string
	Url string `json:"url"`
}

// Generated by: go run github.com/Feresey/gen-tgbotapi/cmd/generator -t ./generator/tempaltes -o api -s ./schema/public/all.json

package api

import "fmt"

type ErrIncorrectEnum struct {
	Value string
}

func (e ErrIncorrectEnum) Error() string {
	return fmt.Sprintf("incorrect enum value: %s", e.Value)
}

type ChatType int

const (
	_ ChatType = iota
	ChatTypeChannel
	ChatTypeGroup
	ChatTypePrivate
	ChatTypeSupergroup
)

var valueChatType = map[ChatType]string{
	1: "channel",
	2: "group",
	3: "private",
	4: "supergroup",
}

var indexChatType = map[string]ChatType{
	"channel":    1,
	"group":      2,
	"private":    3,
	"supergroup": 4,
}

func (enum ChatType) String() string {
	return valueChatType[enum]
}

func (enum ChatType) MarshalText() ([]byte, error) {
	return []byte(enum.String()), nil
}

func (enum *ChatType) UnmarshalText(src []byte) error {
	value, ok := indexChatType[string(src)]
	if !ok {
		return ErrIncorrectEnum{string(src)}
	}
	*enum = value
	return nil
}

type EncryptedType int

const (
	_ EncryptedType = iota
	EncryptedTypeAddress
	EncryptedTypeBankStatement
	EncryptedTypeDriverLicense
	EncryptedTypeEmail
	EncryptedTypeIdentityCard
	EncryptedTypeInternalPassport
	EncryptedTypePassport
	EncryptedTypePassportRegistration
	EncryptedTypePersonalDetails
	EncryptedTypePhoneNumber
	EncryptedTypeRentalAgreement
	EncryptedTypeTemporaryRegistration
	EncryptedTypeUtilityBill
)

var valueEncryptedType = map[EncryptedType]string{
	1:  "address",
	2:  "bank_statement",
	3:  "driver_license",
	4:  "email",
	5:  "identity_card",
	6:  "internal_passport",
	7:  "passport",
	8:  "passport_registration",
	9:  "personal_details",
	10: "phone_number",
	11: "rental_agreement",
	12: "temporary_registration",
	13: "utility_bill",
}

var indexEncryptedType = map[string]EncryptedType{
	"address":                1,
	"bank_statement":         2,
	"driver_license":         3,
	"email":                  4,
	"identity_card":          5,
	"internal_passport":      6,
	"passport":               7,
	"passport_registration":  8,
	"personal_details":       9,
	"phone_number":           10,
	"rental_agreement":       11,
	"temporary_registration": 12,
	"utility_bill":           13,
}

func (enum EncryptedType) String() string {
	return valueEncryptedType[enum]
}

func (enum EncryptedType) MarshalText() ([]byte, error) {
	return []byte(enum.String()), nil
}

func (enum *EncryptedType) UnmarshalText(src []byte) error {
	value, ok := indexEncryptedType[string(src)]
	if !ok {
		return ErrIncorrectEnum{string(src)}
	}
	*enum = value
	return nil
}

type EntityType int

const (
	_ EntityType = iota
	EntityTypeBold
	EntityTypeBotCommand
	EntityTypeCashtag
	EntityTypeCode
	EntityTypeEmail
	EntityTypeHashtag
	EntityTypeItalic
	EntityTypeMention
	EntityTypePhoneNumber
	EntityTypePre
	EntityTypeStrikethrough
	EntityTypeTextLink
	EntityTypeTextMention
	EntityTypeUnderline
	EntityTypeUrl
)

var valueEntityType = map[EntityType]string{
	1:  "bold",
	2:  "bot_command",
	3:  "cashtag",
	4:  "code",
	5:  "email",
	6:  "hashtag",
	7:  "italic",
	8:  "mention",
	9:  "phone_number",
	10: "pre",
	11: "strikethrough",
	12: "text_link",
	13: "text_mention",
	14: "underline",
	15: "url",
}

var indexEntityType = map[string]EntityType{
	"bold":          1,
	"bot_command":   2,
	"cashtag":       3,
	"code":          4,
	"email":         5,
	"hashtag":       6,
	"italic":        7,
	"mention":       8,
	"phone_number":  9,
	"pre":           10,
	"strikethrough": 11,
	"text_link":     12,
	"text_mention":  13,
	"underline":     14,
	"url":           15,
}

func (enum EntityType) String() string {
	return valueEntityType[enum]
}

func (enum EntityType) MarshalText() ([]byte, error) {
	return []byte(enum.String()), nil
}

func (enum *EntityType) UnmarshalText(src []byte) error {
	value, ok := indexEntityType[string(src)]
	if !ok {
		return ErrIncorrectEnum{string(src)}
	}
	*enum = value
	return nil
}

type InlineType int

const (
	_ InlineType = iota
	InlineTypeArticle
	InlineTypeAudio
	InlineTypeContact
	InlineTypeDocument
	InlineTypeGame
	InlineTypeGif
	InlineTypeLocation
	InlineTypeMpeg4Gif
	InlineTypePhoto
	InlineTypeSticker
	InlineTypeVenue
	InlineTypeVideo
	InlineTypeVoice
)

var valueInlineType = map[InlineType]string{
	1:  "article",
	2:  "audio",
	3:  "contact",
	4:  "document",
	5:  "game",
	6:  "gif",
	7:  "location",
	8:  "mpeg4_gif",
	9:  "photo",
	10: "sticker",
	11: "venue",
	12: "video",
	13: "voice",
}

var indexInlineType = map[string]InlineType{
	"article":   1,
	"audio":     2,
	"contact":   3,
	"document":  4,
	"game":      5,
	"gif":       6,
	"location":  7,
	"mpeg4_gif": 8,
	"photo":     9,
	"sticker":   10,
	"venue":     11,
	"video":     12,
	"voice":     13,
}

func (enum InlineType) String() string {
	return valueInlineType[enum]
}

func (enum InlineType) MarshalText() ([]byte, error) {
	return []byte(enum.String()), nil
}

func (enum *InlineType) UnmarshalText(src []byte) error {
	value, ok := indexInlineType[string(src)]
	if !ok {
		return ErrIncorrectEnum{string(src)}
	}
	*enum = value
	return nil
}

type InputType int

const (
	_ InputType = iota
	InputTypeAnimation
	InputTypeAudio
	InputTypeDocument
	InputTypePhoto
	InputTypeVideo
)

var valueInputType = map[InputType]string{
	1: "animation",
	2: "audio",
	3: "document",
	4: "photo",
	5: "video",
}

var indexInputType = map[string]InputType{
	"animation": 1,
	"audio":     2,
	"document":  3,
	"photo":     4,
	"video":     5,
}

func (enum InputType) String() string {
	return valueInputType[enum]
}

func (enum InputType) MarshalText() ([]byte, error) {
	return []byte(enum.String()), nil
}

func (enum *InputType) UnmarshalText(src []byte) error {
	value, ok := indexInputType[string(src)]
	if !ok {
		return ErrIncorrectEnum{string(src)}
	}
	*enum = value
	return nil
}

type KeyboardButtonType int

const (
	_ KeyboardButtonType = iota
	KeyboardButtonTypeQuiz
	KeyboardButtonTypeRegular
)

var valueKeyboardButtonType = map[KeyboardButtonType]string{
	1: "quiz",
	2: "regular",
}

var indexKeyboardButtonType = map[string]KeyboardButtonType{
	"quiz":    1,
	"regular": 2,
}

func (enum KeyboardButtonType) String() string {
	return valueKeyboardButtonType[enum]
}

func (enum KeyboardButtonType) MarshalText() ([]byte, error) {
	return []byte(enum.String()), nil
}

func (enum *KeyboardButtonType) UnmarshalText(src []byte) error {
	value, ok := indexKeyboardButtonType[string(src)]
	if !ok {
		return ErrIncorrectEnum{string(src)}
	}
	*enum = value
	return nil
}

type PassportType int

const (
	_ PassportType = iota
	PassportTypeAddress
	PassportTypeBankStatement
	PassportTypeDriverLicense
	PassportTypeIdentityCard
	PassportTypeInternalPassport
	PassportTypePassport
	PassportTypePassportRegistration
	PassportTypePersonalDetails
	PassportTypeRentalAgreement
	PassportTypeTemporaryRegistration
	PassportTypeUtilityBill
)

var valuePassportType = map[PassportType]string{
	1:  "address",
	2:  "bank_statement",
	3:  "driver_license",
	4:  "identity_card",
	5:  "internal_passport",
	6:  "passport",
	7:  "passport_registration",
	8:  "personal_details",
	9:  "rental_agreement",
	10: "temporary_registration",
	11: "utility_bill",
}

var indexPassportType = map[string]PassportType{
	"address":                1,
	"bank_statement":         2,
	"driver_license":         3,
	"identity_card":          4,
	"internal_passport":      5,
	"passport":               6,
	"passport_registration":  7,
	"personal_details":       8,
	"rental_agreement":       9,
	"temporary_registration": 10,
	"utility_bill":           11,
}

func (enum PassportType) String() string {
	return valuePassportType[enum]
}

func (enum PassportType) MarshalText() ([]byte, error) {
	return []byte(enum.String()), nil
}

func (enum *PassportType) UnmarshalText(src []byte) error {
	value, ok := indexPassportType[string(src)]
	if !ok {
		return ErrIncorrectEnum{string(src)}
	}
	*enum = value
	return nil
}

type PollType int

const (
	_ PollType = iota
	PollTypeQuiz
	PollTypeRegular
)

var valuePollType = map[PollType]string{
	1: "quiz",
	2: "regular",
}

var indexPollType = map[string]PollType{
	"quiz":    1,
	"regular": 2,
}

func (enum PollType) String() string {
	return valuePollType[enum]
}

func (enum PollType) MarshalText() ([]byte, error) {
	return []byte(enum.String()), nil
}

func (enum *PollType) UnmarshalText(src []byte) error {
	value, ok := indexPollType[string(src)]
	if !ok {
		return ErrIncorrectEnum{string(src)}
	}
	*enum = value
	return nil
}

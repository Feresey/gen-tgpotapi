// Generated by: go run github.com/Feresey/gen-tgbotapi/cmd/generator -t ./generator/tempaltes -o api -s ./schema/public/all.json

package api

import "fmt"

type ErrIncorrectEnum struct {
	Value string
}

func (e ErrIncorrectEnum) Error() string {
	return fmt.Sprintf("incorrect enum value: %s", e.Value)
}

type ChatType int

const (
	_ ChatType = iota
	ChatTypePrivate
	ChatTypeGroup
	ChatTypeSupergroup
	ChatTypeChannel
)

var valueChatType = map[ChatType]string{
	1: "private",
	2: "group",
	3: "supergroup",
	4: "channel",
}

var indexChatType = map[string]ChatType{
	"private":    1,
	"group":      2,
	"supergroup": 3,
	"channel":    4,
}

func (enum ChatType) String() string {
	return valueChatType[enum]
}

func (enum ChatType) MarshalText() ([]byte, error) {
	return []byte(enum.String()), nil
}

func (enum *ChatType) UnmarshalText(src []byte) error {
	value, ok := indexChatType[string(src)]
	if !ok {
		return ErrIncorrectEnum{string(src)}
	}
	*enum = value
	return nil
}

type EncryptedType int

const (
	_ EncryptedType = iota
	EncryptedTypeInternalPassport
	EncryptedTypeRentalAgreement
	EncryptedTypePassportRegistration
	EncryptedTypeTemporaryRegistration
	EncryptedTypePhoneNumber
	EncryptedTypeUtilityBill
	EncryptedTypeBankStatement
	EncryptedTypeEmail
	EncryptedTypePersonalDetails
	EncryptedTypePassport
	EncryptedTypeDriverLicense
	EncryptedTypeIdentityCard
	EncryptedTypeAddress
)

var valueEncryptedType = map[EncryptedType]string{
	1:  "internal_passport",
	2:  "rental_agreement",
	3:  "passport_registration",
	4:  "temporary_registration",
	5:  "phone_number",
	6:  "utility_bill",
	7:  "bank_statement",
	8:  "email",
	9:  "personal_details",
	10: "passport",
	11: "driver_license",
	12: "identity_card",
	13: "address",
}

var indexEncryptedType = map[string]EncryptedType{
	"internal_passport":      1,
	"rental_agreement":       2,
	"passport_registration":  3,
	"temporary_registration": 4,
	"phone_number":           5,
	"utility_bill":           6,
	"bank_statement":         7,
	"email":                  8,
	"personal_details":       9,
	"passport":               10,
	"driver_license":         11,
	"identity_card":          12,
	"address":                13,
}

func (enum EncryptedType) String() string {
	return valueEncryptedType[enum]
}

func (enum EncryptedType) MarshalText() ([]byte, error) {
	return []byte(enum.String()), nil
}

func (enum *EncryptedType) UnmarshalText(src []byte) error {
	value, ok := indexEncryptedType[string(src)]
	if !ok {
		return ErrIncorrectEnum{string(src)}
	}
	*enum = value
	return nil
}

type EntityType int

const (
	_ EntityType = iota
	EntityTypeBotCommand
	EntityTypeEmail
	EntityTypeStrikethrough
	EntityTypeCashtag
	EntityTypeUrl
	EntityTypeItalic
	EntityTypeUnderline
	EntityTypeCode
	EntityTypePre
	EntityTypeMention
	EntityTypeHashtag
	EntityTypeTextMention
	EntityTypePhoneNumber
	EntityTypeBold
	EntityTypeTextLink
)

var valueEntityType = map[EntityType]string{
	1:  "bot_command",
	2:  "email",
	3:  "strikethrough",
	4:  "cashtag",
	5:  "url",
	6:  "italic",
	7:  "underline",
	8:  "code",
	9:  "pre",
	10: "mention",
	11: "hashtag",
	12: "text_mention",
	13: "phone_number",
	14: "bold",
	15: "text_link",
}

var indexEntityType = map[string]EntityType{
	"bot_command":   1,
	"email":         2,
	"strikethrough": 3,
	"cashtag":       4,
	"url":           5,
	"italic":        6,
	"underline":     7,
	"code":          8,
	"pre":           9,
	"mention":       10,
	"hashtag":       11,
	"text_mention":  12,
	"phone_number":  13,
	"bold":          14,
	"text_link":     15,
}

func (enum EntityType) String() string {
	return valueEntityType[enum]
}

func (enum EntityType) MarshalText() ([]byte, error) {
	return []byte(enum.String()), nil
}

func (enum *EntityType) UnmarshalText(src []byte) error {
	value, ok := indexEntityType[string(src)]
	if !ok {
		return ErrIncorrectEnum{string(src)}
	}
	*enum = value
	return nil
}

type InlineType int

const (
	_ InlineType = iota
	InlineTypeVenue
	InlineTypeContact
	InlineTypeArticle
	InlineTypeGame
	InlineTypeDocument
	InlineTypePhoto
	InlineTypeGif
	InlineTypeVoice
	InlineTypeMpeg4Gif
	InlineTypeVideo
	InlineTypeLocation
	InlineTypeSticker
	InlineTypeAudio
)

var valueInlineType = map[InlineType]string{
	1:  "venue",
	2:  "contact",
	3:  "article",
	4:  "game",
	5:  "document",
	6:  "photo",
	7:  "gif",
	8:  "voice",
	9:  "mpeg4_gif",
	10: "video",
	11: "location",
	12: "sticker",
	13: "audio",
}

var indexInlineType = map[string]InlineType{
	"venue":     1,
	"contact":   2,
	"article":   3,
	"game":      4,
	"document":  5,
	"photo":     6,
	"gif":       7,
	"voice":     8,
	"mpeg4_gif": 9,
	"video":     10,
	"location":  11,
	"sticker":   12,
	"audio":     13,
}

func (enum InlineType) String() string {
	return valueInlineType[enum]
}

func (enum InlineType) MarshalText() ([]byte, error) {
	return []byte(enum.String()), nil
}

func (enum *InlineType) UnmarshalText(src []byte) error {
	value, ok := indexInlineType[string(src)]
	if !ok {
		return ErrIncorrectEnum{string(src)}
	}
	*enum = value
	return nil
}

type InputType int

const (
	_ InputType = iota
	InputTypePhoto
	InputTypeAnimation
	InputTypeVideo
	InputTypeDocument
	InputTypeAudio
)

var valueInputType = map[InputType]string{
	1: "photo",
	2: "animation",
	3: "video",
	4: "document",
	5: "audio",
}

var indexInputType = map[string]InputType{
	"photo":     1,
	"animation": 2,
	"video":     3,
	"document":  4,
	"audio":     5,
}

func (enum InputType) String() string {
	return valueInputType[enum]
}

func (enum InputType) MarshalText() ([]byte, error) {
	return []byte(enum.String()), nil
}

func (enum *InputType) UnmarshalText(src []byte) error {
	value, ok := indexInputType[string(src)]
	if !ok {
		return ErrIncorrectEnum{string(src)}
	}
	*enum = value
	return nil
}

type KeyboardButtonType int

const (
	_ KeyboardButtonType = iota
	KeyboardButtonTypeQuiz
	KeyboardButtonTypeRegular
)

var valueKeyboardButtonType = map[KeyboardButtonType]string{
	1: "quiz",
	2: "regular",
}

var indexKeyboardButtonType = map[string]KeyboardButtonType{
	"quiz":    1,
	"regular": 2,
}

func (enum KeyboardButtonType) String() string {
	return valueKeyboardButtonType[enum]
}

func (enum KeyboardButtonType) MarshalText() ([]byte, error) {
	return []byte(enum.String()), nil
}

func (enum *KeyboardButtonType) UnmarshalText(src []byte) error {
	value, ok := indexKeyboardButtonType[string(src)]
	if !ok {
		return ErrIncorrectEnum{string(src)}
	}
	*enum = value
	return nil
}

type PassportType int

const (
	_ PassportType = iota
	PassportTypeInternalPassport
	PassportTypePersonalDetails
	PassportTypeBankStatement
	PassportTypePassportRegistration
	PassportTypeTemporaryRegistration
	PassportTypeIdentityCard
	PassportTypeDriverLicense
	PassportTypeAddress
	PassportTypeUtilityBill
	PassportTypeRentalAgreement
	PassportTypePassport
)

var valuePassportType = map[PassportType]string{
	1:  "internal_passport",
	2:  "personal_details",
	3:  "bank_statement",
	4:  "passport_registration",
	5:  "temporary_registration",
	6:  "identity_card",
	7:  "driver_license",
	8:  "address",
	9:  "utility_bill",
	10: "rental_agreement",
	11: "passport",
}

var indexPassportType = map[string]PassportType{
	"internal_passport":      1,
	"personal_details":       2,
	"bank_statement":         3,
	"passport_registration":  4,
	"temporary_registration": 5,
	"identity_card":          6,
	"driver_license":         7,
	"address":                8,
	"utility_bill":           9,
	"rental_agreement":       10,
	"passport":               11,
}

func (enum PassportType) String() string {
	return valuePassportType[enum]
}

func (enum PassportType) MarshalText() ([]byte, error) {
	return []byte(enum.String()), nil
}

func (enum *PassportType) UnmarshalText(src []byte) error {
	value, ok := indexPassportType[string(src)]
	if !ok {
		return ErrIncorrectEnum{string(src)}
	}
	*enum = value
	return nil
}

type PollType int

const (
	_ PollType = iota
	PollTypeRegular
	PollTypeQuiz
)

var valuePollType = map[PollType]string{
	1: "regular",
	2: "quiz",
}

var indexPollType = map[string]PollType{
	"regular": 1,
	"quiz":    2,
}

func (enum PollType) String() string {
	return valuePollType[enum]
}

func (enum PollType) MarshalText() ([]byte, error) {
	return []byte(enum.String()), nil
}

func (enum *PollType) UnmarshalText(src []byte) error {
	value, ok := indexPollType[string(src)]
	if !ok {
		return ErrIncorrectEnum{string(src)}
	}
	*enum = value
	return nil
}
